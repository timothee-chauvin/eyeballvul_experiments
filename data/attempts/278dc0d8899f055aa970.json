{
  "commit": "76eaee88733885092db19807c23f024b5a1f5bca",
  "repo_url": "https://github.com/apostrophecms/sanitize-html",
  "model": "gemini/gemini-1.5-pro",
  "chunk_hashes": [
    "ab93dafa774218bbe1c0"
  ],
  "responses": [
    {
      "content": "```yaml\nleads:\n  - headline: Unsafe Regex in allowedAttributes\n    analysis: |\n      The code allows specifying allowed attributes as globs using the \"*\" wildcard. However, when constructing the regex from the provided glob, it directly inserts the user-provided string into the regex without proper escaping.\n    cwe: CWE-1333\n    function_names:\n      - sanitizeHtml\n    filenames:\n      - index.js\n    classification: very promising\n  - headline: Bypass of URL scheme validation using malformed entities\n    analysis: |\n      The function `naughtyHref` attempts to filter out dangerous URL schemes like \"javascript:\". It does so by removing characters with ASCII codes 1-32 and then checking the scheme. However, it's possible to bypass this check by using malformed entities. For example, the entity `&#0000001s` will be decoded to `\\u0001s` by the `entities` module, which is a control character followed by the letter \"s\". This will bypass the character removal step and result in the scheme being interpreted as \"1script:\" instead of \"javascript:\".\n    cwe: CWE-704\n    function_names:\n      - naughtyHref\n    filenames:\n      - index.js\n    classification: slightly promising\nleads:\n  - headline: Potential XSS via Unescaped Attribute Values\n    analysis: |\n      The code uses `escapeHtml` to escape attribute values, preventing XSS vulnerabilities. However, the `escapeHtml` function itself is not comprehensive and might not cover all possible XSS vectors. Additionally, if there are any other places where user input is directly inserted into attributes without escaping, it could lead to XSS. \n    cwe: CWE-79\n    function_names:\n      - sanitizeHtml\n    filenames:\n      - index.js\n    classification: slightly promising\n```",
      "date": "2024-06-12T11:40:43.280350",
      "usage": {
        "prompt_tokens": 10430,
        "completion_tokens": 373,
        "cost": 0.0404215
      }
    }
  ],
  "leads": [
    {
      "headline": "Potential XSS via Unescaped Attribute Values",
      "analysis": "The code uses escapeHtml to escape attribute values, preventing XSS vulnerabilities. However, the escapeHtml function itself is not comprehensive and might not cover all possible XSS vectors. Additionally, if there are any other places where user input is directly inserted into attributes without escaping, it could lead to XSS. \n",
      "classification": "slightly promising",
      "cwe": "CWE-79",
      "function_names": [
        "sanitizeHtml"
      ],
      "filenames": [
        "index.js"
      ]
    }
  ],
  "scores": [
    {
      "stats": {
        "fn": 5,
        "tp": 0,
        "fp": 0
      },
      "mapping": {},
      "vuln_dates": {
        "CVE-2022-25887": "2022-08-30T05:15:07",
        "CVE-2021-26539": "2021-02-08T17:15:13",
        "CVE-2021-26540": "2021-02-08T17:15:13",
        "CVE-2024-21501": "2024-02-24T05:15:44",
        "CVE-2017-16016": "2018-06-04T19:29:01"
      },
      "scoring_model": "claude-3-opus-20240229",
      "type": "llm",
      "instruction_template_hash": "245ace12b6361954d0a2"
    },
    {
      "stats": {
        "fn": 5,
        "tp": 0,
        "fp": 0
      },
      "mapping": {},
      "vuln_dates": {
        "CVE-2022-25887": "2022-08-30T05:15:07",
        "CVE-2021-26539": "2021-02-08T17:15:13",
        "CVE-2021-26540": "2021-02-08T17:15:13",
        "CVE-2024-21501": "2024-02-24T05:15:44",
        "CVE-2017-16016": "2018-06-04T19:29:01"
      },
      "scoring_model": "claude-3-5-sonnet-20240620",
      "type": "llm",
      "instruction_template_hash": "245ace12b6361954d0a2"
    }
  ],
  "instruction_template_hash": "10c0163db4740318a544",
  "version": "0.1.0"
}
