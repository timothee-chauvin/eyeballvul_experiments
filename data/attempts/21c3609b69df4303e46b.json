{
  "commit": "218a6b4f98a2ff5fe3f6076b401d5c24c3021943",
  "repo_url": "https://github.com/encode/starlette",
  "model": "claude-3-sonnet-20240229",
  "chunk_hashes": [
    "54cd07e20e89d71304fd"
  ],
  "responses": [
    {
      "content": "The provided code is the source code of the Starlette web framework, which is a lightweight ASGI framework for building high-performance asynchronous web services in Python. Here's a brief overview of the different files and their contents:\n\n1. `__init__.py`: This file defines the current version of Starlette.\n\n2. `_compat.py`: This file provides compatibility functions for different Python versions.\n\n3. `_utils.py`: This file contains utility functions used across the Starlette codebase.\n\n4. `applications.py`: This file defines the `Starlette` class, which is the main entry point for creating Starlette applications.\n\n5. `authentication.py`: This file contains classes and utilities for handling authentication in Starlette applications.\n\n6. `background.py`: This file defines classes for running background tasks in Starlette applications.\n\n7. `concurrency.py`: This file provides utilities for running tasks concurrently in Starlette applications.\n\n8. `config.py`: This file defines classes for handling configuration settings in Starlette applications.\n\n9. `convertors.py`: This file defines URL converters for parsing and validating URL parameters.\n\n10. `datastructures.py`: This file defines various data structures used throughout the Starlette codebase, such as `URL`, `Headers`, `QueryParams`, and `FormData`.\n\n11. `endpoints.py`: This file defines the `HTTPEndpoint` and `WebSocketEndpoint` classes, which are used for handling HTTP and WebSocket requests, respectively.\n\n12. `exceptions.py`: This file defines the `HTTPException` and `WebSocketException` classes, which are used for handling exceptions in Starlette applications.\n\n13. `formparsers.py`: This file contains classes and utilities for parsing form data, including file uploads.\n\n14. `middleware/`: This directory contains various middleware classes that can be used in Starlette applications for tasks such as authentication, CORS handling, GZip compression, and more.\n\n15. `requests.py`: This file defines the `Request` class, which represents an incoming HTTP request in a Starlette application.\n\n16. `responses.py`: This file defines various response classes, such as `Response`, `JSONResponse`, `RedirectResponse`, `StreamingResponse`, and `FileResponse`.\n\n17. `routing.py`: This file defines classes for routing HTTP and WebSocket requests in Starlette applications, including `Route`, `WebSocketRoute`, `Mount`, `Host`, and `Router`.\n\n18. `schemas.py`: This file provides utilities for generating OpenAPI schemas for Starlette applications.\n\n19. `staticfiles.py`: This file defines the `StaticFiles` class, which is used for serving static files in Starlette applications.\n\n20. `status.py`: This file defines constants for HTTP and WebSocket status codes.\n\n21. `templating.py`: This file provides support for rendering templates using the Jinja2 template engine.\n\n22. `testclient.py`: This file defines the `TestClient` class, which is a utility for testing Starlette applications.\n\n23. `types.py`: This file defines common type annotations used throughout the Starlette codebase.\n\n24. `websockets.py`: This file defines the `WebSocket` class, which is used for handling WebSocket connections in Starlette applications.\n\nThe Starlette codebase is organized in a modular way, with each file or directory focusing on a specific aspect of the framework's functionality. This structure makes it easier to understand, maintain, and extend the codebase as needed.",
      "date": "2024-06-09T11:41:26.800563",
      "usage": {
        "prompt_tokens": 151921,
        "completion_tokens": 821,
        "cost": 0.468078
      }
    }
  ],
  "leads": [],
  "scores": [
    {
      "stats": {
        "fn": 3,
        "tp": 0,
        "fp": 0
      },
      "mapping": {},
      "vuln_dates": {
        "CVE-2023-30798": "2023-04-21T16:15:07",
        "CVE-2023-29159": "2023-06-01T02:15:09",
        "CVE-2024-24762": "2024-02-05T15:15:09"
      },
      "scoring_model": "gpt-4o-2024-05-13",
      "type": "llm",
      "instruction_template_hash": "8998f09cf57fca8a6e03"
    }
  ],
  "instruction_template_hash": "10c0163db4740318a544",
  "version": "0.1.0"
}
