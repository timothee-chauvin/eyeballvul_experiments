{
  "commit": "150f4331481fcfac48b870d2335c82c7b7a2eeb0",
  "repo_url": "https://github.com/braintree/sanitize-url",
  "model": "gemini/gemini-1.5-pro",
  "chunk_hashes": [
    "f2714468a8fbed78ec1f"
  ],
  "responses": [
    {
      "content": "```yaml\nleads:\n  - headline: URL sanitizer bypass via unicode character replacement\n    analysis: |\n      The `sanitizeUrl` function is vulnerable to a bypass that can allow javascript execution. Replacing the characters of a blacklisted protocol like \"javascript\" with unicode characters will bypass the `invalidProtocolRegex` check. For example, because `sanitizeUrl` does not canonicalize the URL, it considers `java%EF%BB%BFscript:alert(1)` to have the scheme `java%EF%BB%BFscript`, which is not blacklisted.\n    cwe: CWE-20\n    function_names:\n      - sanitizeUrl\n    filenames:\n      - src/index.ts\n    classification: very promising\n  - headline: URL sanitizer bypass via nested protocols\n    analysis: |\n      The `sanitizeUrl` function is vulnerable to a bypass that can allow javascript execution. It only checks that the blacklisted protocols aren't at the beginning of the input, so it can be bypassed by putting another protocol at the beginning of the string. For example, `sanitizeUrl(\"data:text/html, <script>alert(1)</script>\")` returns \"about:blank\", but `sanitizeUrl(\"data:text/html,<script>alert(1)</script>\")` (note the missing space) returns the input, because `invalidProtocolRegex` matches against the beginning of the string. An attacker might be able to exploit this by using a URL like `data:text/html,javascript:alert(1)`\n    cwe: CWE-20\n    function_names:\n      - sanitizeUrl\n    filenames:\n      - src/index.ts\n    classification: very promising\n```",
      "date": "2024-06-12T15:20:19.080644",
      "usage": {
        "prompt_tokens": 4031,
        "completion_tokens": 339,
        "cost": 0.017668
      }
    }
  ],
  "leads": [
    {
      "headline": "URL sanitizer bypass via unicode character replacement",
      "analysis": "The sanitizeUrl function is vulnerable to a bypass that can allow javascript execution. Replacing the characters of a blacklisted protocol like \"javascript\" with unicode characters will bypass the invalidProtocolRegex check. For example, because sanitizeUrl does not canonicalize the URL, it considers java%EF%BB%BFscript:alert(1) to have the scheme java%EF%BB%BFscript, which is not blacklisted.\n",
      "classification": "very promising",
      "cwe": "CWE-20",
      "function_names": [
        "sanitizeUrl"
      ],
      "filenames": [
        "src/index.ts"
      ]
    },
    {
      "headline": "URL sanitizer bypass via nested protocols",
      "analysis": "The sanitizeUrl function is vulnerable to a bypass that can allow javascript execution. It only checks that the blacklisted protocols aren't at the beginning of the input, so it can be bypassed by putting another protocol at the beginning of the string. For example, sanitizeUrl(\"data:text/html, <script>alert(1)</script>\") returns \"about:blank\", but sanitizeUrl(\"data:text/html,<script>alert(1)</script>\") (note the missing space) returns the input, because invalidProtocolRegex matches against the beginning of the string. An attacker might be able to exploit this by using a URL like data:text/html,javascript:alert(1)\n",
      "classification": "very promising",
      "cwe": "CWE-20",
      "function_names": [
        "sanitizeUrl"
      ],
      "filenames": [
        "src/index.ts"
      ]
    }
  ],
  "scores": [
    {
      "stats": {
        "fn": 1,
        "tp": 1,
        "fp": 0
      },
      "mapping": {
        "0": "CVE-2021-23648",
        "1": "CVE-2021-23648"
      },
      "vuln_dates": {
        "CVE-2022-48345": "2023-02-24T06:15:11",
        "CVE-2021-23648": "2022-03-16T16:15:10"
      },
      "scoring_model": "claude-3-opus-20240229",
      "type": "llm",
      "instruction_template_hash": "245ace12b6361954d0a2"
    },
    {
      "stats": {
        "fn": 1,
        "tp": 1,
        "fp": 0
      },
      "mapping": {
        "0": "CVE-2021-23648",
        "1": "CVE-2021-23648"
      },
      "vuln_dates": {
        "CVE-2022-48345": "2023-02-24T06:15:11",
        "CVE-2021-23648": "2022-03-16T16:15:10"
      },
      "scoring_model": "claude-3-5-sonnet-20240620",
      "type": "llm",
      "instruction_template_hash": "245ace12b6361954d0a2"
    }
  ],
  "instruction_template_hash": "10c0163db4740318a544",
  "version": "0.1.0"
}
