{
  "1": {
    "attempt": "1fce1200b7980bc8b88c",
    "lead": {
      "headline": "Improper Input Validation in prepareSaltFunction",
      "analysis": "The prepareSaltFunction method in SaltAPIBuilder.java does not properly validate the arguments passed in through the myarguments parameter. The arguments are split on whitespace using a regex, but no further validation is done on the individual arguments. This could allow an attacker to inject malicious data into the arguments sent to the Salt API.\n",
      "classification": "very promising",
      "cwe": "CWE-20",
      "function_names": [
        "prepareSaltFunction"
      ],
      "filenames": [
        "src/main/java/com/waytta/SaltAPIBuilder.java"
      ]
    },
    "vulns": {
      "CVE-2018-1999027": "An exposure of sensitive information vulnerability exists in Jenkins SaltStack Plugin 3.1.6 and earlier in SaltAPIBuilder.java, SaltAPIStep.java that allows attackers to capture credentials with a known credentials ID stored in Jenkins."
    }
  },
  "2": {
    "attempt": "ce6a244118107f420065",
    "lead": {
      "headline": "Improper Input Validation vulnerability in Formula.Parser",
      "analysis": "The Formula.Parser class does not validate user input correctly in several cases, allowing the injection of invalid or malicious data. \n\nFor example, when parsing a string with unbalanced parentheses, the parser will throw an error with the entire formula string in the error message, potentially leaking sensitive information.\n\nAdditionally, the parser does not properly validate function arguments, allowing the injection of malicious code.\n",
      "classification": "very promising",
      "cwe": "CWE-20",
      "function_names": [
        "Formula.Parser"
      ],
      "filenames": [
        "lib/index.js"
      ]
    },
    "vulns": {
      "CVE-2023-25166": "formula is a math and string formula parser. In versions prior to 3.0.1 crafted user-provided strings to formula's parser might lead to polynomial execution time and a denial of service. Users should upgrade to 3.0.1+. There are no known workarounds for this vulnerability."
    }
  },
  "3": {
    "attempt": "a1291b41cc6835aa748b",
    "lead": {
      "headline": "Improper certificate validation in DefaultSignedLicenseGenerator",
      "analysis": "The DefaultSignedLicenseGenerator class generates signed licenses using a provided CertifiedKeyPair and \nCertificateProvider. However, it does not perform any validation on the provided certificate chain to ensure\nthe certificates are trusted and haven't been revoked. This could allow generating licenses signed by\nuntrusted or compromised keys.\n",
      "classification": "very promising",
      "cwe": "CWE-295",
      "function_names": [
        "DefaultSignedLicenseGenerator.generate"
      ],
      "filenames": [
        "application-licensing-manager/application-licensing-manager-api/src/main/java/com/xwiki/licensing/internal/DefaultSignedLicenseGenerator.java"
      ]
    },
    "vulns": {
      "CVE-2024-26138": "The XWiki licensor application, which manages and enforce application licenses for paid extensions, includes the document `Licenses.Code.LicenseJSON` that provides information for admins regarding active licenses. This document is public and thus exposes this information publicly. The information includes the instance's id as well as first and last name and email of the license owner. This is a leak of information that isn't supposed to be public. The instance id allows associating data on the active installs data with the concrete XWiki instance. Active installs assures that \"there's no way to find who's having a given UUID\" (referring to the instance id). Further, the information who the license owner is and information about the obtained licenses can be used for targeted phishing attacks. Also, while user information is normally public, email addresses might only be displayed obfuscated,  depending on the configuration. This has been fixed in Application Licensing 1.24.2. There are no known workarounds besides upgrading."
    }
  },
  "4": {
    "attempt": "9f04e4c2f778d7918b46",
    "lead": {
      "headline": "Tests can be hot patched to change assertions during test execution",
      "analysis": "The pytest_assertrepr_compare function allows tests to signal that they want the asserted value to be replaced with the output of the function under test. If the signal is detected, the test is skipped, and the test code is updated on disk with the new assertion. This means that:\n1. Tests can be hot patched to change assertions during test execution.\n2. The test suite could be manipulated to always pass, even when the tested code is incorrect.\n",
      "classification": "very promising",
      "cwe": "CWE-668",
      "function_names": [
        "pytest_assertrepr_compare"
      ],
      "filenames": [
        "conftest.py"
      ]
    },
    "vulns": {
      "CVE-2022-42039": "The d8s-lists package for Python, as distributed on PyPI, included a potential code-execution backdoor inserted by a third party. The backdoor is the democritus-dicts package. The affected version is 0.1.0."
    }
  },
  "5": {
    "attempt": "c983b0b4f655eec7b8f9",
    "lead": {
      "headline": "Uncontrolled Memory Allocation in Command Identifier Functions",
      "analysis": "The insert_command_identifier_command function allocates memory for child and alloc_children without any control over how many times or how much memory is being allocated. Additionally, there is insufficient error handling for failed allocations, which can lead to memory corruption or denial of service through uncontrolled memory consumption or null pointer dereference.\n\nCreating multiple nested commands can cause the application to consume a significant amount of memory or encounter a crash due to a failed memory allocation.\n",
      "classification": "very promising",
      "cwe": "CWE-770",
      "function_names": [
        "insert_command_identifier_command"
      ],
      "filenames": [
        "commandidentifier.c"
      ]
    },
    "vulns": {
      "CVE-2022-48682": "In deletefiles in FDUPES before 2.2.0, a TOCTOU race condition allows arbitrary file deletion via a symlink."
    }
  },
  "6": {
    "attempt": "ed8b13b3e0366ed99b14",
    "lead": {
      "headline": "XML External Entity (XXE) vulnerability in DOM parser",
      "analysis": "The application utilizes a DOM parser to parse XML data, and it does not disable external entities, leading to a potential XXE attack. If an attacker can supply or modify the XML data, they can include external entities that the parser will attempt to resolve, possibly allowing the attacker to read sensitive data from the server, perform SSRF attacks, or cause a denial of service.\n",
      "classification": "very promising",
      "cwe": "CWE-611",
      "function_names": [
        "parse"
      ],
      "filenames": [
        "/src/test/java/org/codehaus/jettison/DOMTest.java"
      ]
    },
    "vulns": {
      "CVE-2023-1436": "An infinite recursion is triggered in Jettison when constructing a JSONArray from a Collection that contains a self-reference in one of its elements. This leads to a StackOverflowError exception being thrown.\n\n",
      "CVE-2022-45693": "Jettison before v1.5.2 was discovered to contain a stack overflow via the map parameter. This vulnerability allows attackers to cause a Denial of Service (DoS) via a crafted string.",
      "CVE-2022-45685": "A stack overflow in Jettison before v1.5.2 allows attackers to cause a Denial of Service (DoS) via crafted JSON data.",
      "CVE-2022-40149": "Those using Jettison to parse untrusted XML or JSON data may be vulnerable to Denial of Service attacks (DOS). If the parser is running on user supplied input, an attacker may supply content that causes the parser to crash by stackoverflow. This effect may support a denial of service attack.",
      "CVE-2022-40150": "Those using Jettison to parse untrusted XML or JSON data may be vulnerable to Denial of Service attacks (DOS). If the parser is running on user supplied input, an attacker may supply content that causes the parser to crash by Out of memory. This effect may support a denial of service attack."
    }
  },
  "7": {
    "attempt": "9cd3a1dca54d1105157f",
    "lead": {
      "headline": "Improper Neutralization of Special Elements used in an Expression Language Statement ('Expression Language Injection')",
      "analysis": "The codebase contains a vulnerability related to Expression Language Injection. The mattermost.js file in the webview folder uses dynamic code execution, such as window.open(), which could be vulnerable to Expression Language Injection if the URL passed to window.open() is not properly sanitized.\n",
      "classification": "very promising",
      "cwe": "CWE-917",
      "function_names": [
        "open_window"
      ],
      "filenames": [
        "src/browser/webview/mattermost.js"
      ]
    },
    "vulns": {
      "CVE-2023-2000": "Mattermost Desktop App fails to validate a mattermost server redirection and navigates\u00a0to an arbitrary website\n",
      "CVE-2023-5875": "Mattermost Desktop fails to correctly\u00a0handle permissions or prompt the user for consent on certain sensitive ones allowing media exploitation from a malicious mattermost server",
      "CVE-2023-5920": "Mattermost Desktop for MacOS fails to utilize the secure keyboard input functionality provided by macOS, allowing for other processes to read the keyboard input.\n\n",
      "CVE-2023-5876": "Mattermost fails to properly validate a RegExp built off the server URL path, allowing an attacker in control of an enrolled server to mount a Denial Of Service.\n\n",
      "CVE-2023-5339": "Mattermost Desktop\u00a0fails to set an appropriate log level during initial run after fresh installation\u00a0resulting in logging all keystrokes\u00a0including password entry\u00a0being logged.\u00a0\n\n",
      "CVE-2019-20856": "An issue was discovered in Mattermost Desktop App before 4.3.0 on macOS. It allows dylib injection.",
      "CVE-2016-11064": "An issue was discovered in Mattermost Desktop App before 3.4.0. Strings could be executed as code via injection.",
      "CVE-2020-14454": "An issue was discovered in Mattermost Desktop App before 4.4.0. Attackers can open web pages in the desktop application because server redirection is mishandled, aka MMSA-2020-0008.",
      "CVE-2020-14455": "An issue was discovered in Mattermost Desktop App before 4.4.0. Prompting for HTTP Basic Authentication is mishandled, allowing phishing, aka MMSA-2020-0007.",
      "CVE-2019-20861": "An issue was discovered in Mattermost Desktop App before 4.2.2. It allows attackers to execute arbitrary code via a crafted link.",
      "CVE-2018-21265": "An issue was discovered in Mattermost Desktop App before 4.0.0. It mishandled the Same Origin Policy for setPermissionRequestHandler (e.g., video, audio, and notifications).",
      "CVE-2020-14456": "An issue was discovered in Mattermost Desktop App before 4.4.0. The Same Origin Policy is mishandled during access-control decisions for web APIs, aka MMSA-2020-0006."
    }
  },
  "8": {
    "attempt": "8bd3fbf5cf5a409e77f5",
    "lead": {
      "headline": "Improper input validation in JS files",
      "analysis": "Various JavaScript files read and manipulate user inputs without proper validation. This is evident in src/js/archive.js and src/js/product.js where user inputs are directly manipulated without sanitization. This can lead to various injection attacks.\n",
      "classification": "very promising",
      "cwe": "CWE-20",
      "function_names": [],
      "filenames": [
        "src/js/archive.js",
        "src/js/product.js"
      ]
    },
    "vulns": {
      "CVE-2024-22153": "Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting') vulnerability in Fahad Mahmood & Alexandre Faustino Stock Locations for WooCommerce allows Stored XSS.This issue affects Stock Locations for WooCommerce: from n/a through 2.5.9.\n\n"
    }
  },
  "9": {
    "attempt": "f4709d5ce6baa29f97b8",
    "lead": {
      "headline": "OS Command Injection in Node.js HTTP Server",
      "analysis": "The server in 'example/complex.js' accepts parameters from incoming HTTP requests and constructs a command that includes unvalidated user input. This can lead to arbitrary OS command execution if malicious inputs are crafted by an attacker. The vulnerability occurs because user-supplied input fetched from req.url is parsed and used directly in forming the server response without proper sanitization.\n",
      "classification": "very promising",
      "cwe": "CWE-78",
      "function_names": [
        "createServer"
      ],
      "filenames": [
        "example/complex.js"
      ]
    },
    "vulns": {
      "CVE-2021-23388": "The package forms before 1.2.1, from 1.3.0 and before 1.3.2 are vulnerable to Regular Expression Denial of Service (ReDoS) via email validation.",
      "CVE-2017-16015": "Forms is a library for easily creating HTML forms. Versions before 1.3.0 did not have proper html escaping. This means that if the application did not sanitize html on behalf of forms, use of forms may be vulnerable to cross site scripting"
    }
  },
  "10": {
    "attempt": "8420594bb1227774bd13",
    "lead": {
      "headline": "Hardcoded SECRET_KEY in Django",
      "analysis": "The Django SECRET_KEY is hardcoded in configs/default/sites.py. This key should be\nkept secret and not stored in the codebase, especially if the code is publicly\navailable. An attacker with access to this key could forge sessions and potentially\ngain control of user accounts.\n",
      "classification": "very promising",
      "cwe": "CWE-798",
      "function_names": [],
      "filenames": [
        "configs/default/sites.py"
      ]
    },
    "vulns": {
      "CVE-2023-38941": "django-sspanel v2022.2.2 was discovered to contain a remote command execution (RCE) vulnerability via the component sspanel/admin_view.py -> GoodsCreateView._post."
    }
  },
  "11": {
    "attempt": "70271f9185a1b6d844b7",
    "lead": {
      "headline": "Presence of multiple buffer overflows or memory mismanagement vulnerabilities",
      "analysis": "The Java implementation of the discovery protocol involves a series of classes and methods that directly handle binary data processing such as PongMessage, PingMessage, RawPacket, and the RLP deserialization methods. In these methods, byte arrays are manipulated and converted, often involving operations that index into arrays or buffers. These operations, if not properly validated for array bounds or if mismanaged, can lead to buffer overflows or other memory-related vulnerabilities. The scenario where these vulnerabilities can manifest includes incorrect handling or assumptions about incoming data size, leading to buffer overflows when copying data into arrays or processing it for packet construction and verification.\n",
      "classification": "very promising",
      "cwe": "CWE-119",
      "function_names": [
        "DecodeException",
        "encode",
        "decode"
      ],
      "filenames": [
        "src/main/java/org/ethereum/beacon/discovery/util/DecodeException.java",
        "src/main/java/org/ethereum/beacon/discovery/packet/impl/MessagePacketImpl.java",
        "src/main/java/org/ethereum/beacon/discovery/message/PingMessage.java"
      ]
    },
    "vulns": {
      "CVE-2024-23688": "Consensys Discovery versions less than 0.4.5 uses the same AES/GCM nonce for the entire session. which should ideally be unique for every message. The node's private key isn't compromised, only the session key generated for specific peer communication is exposed.\n\n"
    }
  },
  "12": {
    "attempt": "19a864d37041446fd450",
    "lead": {
      "headline": "XSS vulnerability in Axis and LabelAxis classes",
      "analysis": "The Axis.getName and LabelAxis.getValues methods return user-controlled data that is not properly encoded when output in HTML/XML responses. This can allow stored XSS if an attacker can control the axis name or label values. The returned values should be HTML encoded before outputting to prevent XSS.\n",
      "classification": "very promising",
      "cwe": "CWE-79",
      "function_names": [
        "Axis.getName",
        "LabelAxis.getValues"
      ],
      "filenames": [
        "src/main/java/hudson/matrix/Axis.java",
        "src/main/java/hudson/matrix/LabelAxis.java"
      ]
    },
    "vulns": {
      "CVE-2020-2224": "Jenkins Matrix Project Plugin 1.16 and earlier does not escape the node names shown in tooltips on the overview page of builds with a single axis, resulting in a stored cross-site scripting vulnerability.",
      "CVE-2020-2225": "Jenkins Matrix Project Plugin 1.16 and earlier does not escape the axis names shown in tooltips on the overview page of builds with multiple axes, resulting in a stored cross-site scripting vulnerability.",
      "CVE-2019-1003031": "A sandbox bypass vulnerability exists in Jenkins Matrix Project Plugin 1.13 and earlier in pom.xml, src/main/java/hudson/matrix/FilterScript.java that allows attackers with Job/Configure permission to execute arbitrary code on the Jenkins master JVM.",
      "CVE-2022-20615": "Jenkins Matrix Project Plugin 1.19 and earlier does not escape HTML metacharacters in node and label names, and label descriptions, resulting in a stored cross-site scripting (XSS) vulnerability exploitable by attackers with Agent/Configure permission.",
      "CVE-2024-23900": "Jenkins Matrix Project Plugin 822.v01b_8c85d16d2 and earlier does not sanitize user-defined axis names of multi-configuration projects, allowing attackers with Item/Configure permission to create or replace any config.xml files on the Jenkins controller file system with content not controllable by the attackers."
    }
  },
  "13": {
    "attempt": "8954861ad364c66e2122",
    "lead": {
      "headline": "Improper Neutralization of Special Elements used in an OS Command ('OS Command Injection')",
      "analysis": "The codebase contains a vulnerability that could allow an attacker to execute arbitrary OS commands on the server. This vulnerability exists in the ftpCWD and ftpRMD functions, where user-provided parameters are used directly in CreateFile and RemoveDirectory system calls without proper validation or sanitization. An attacker could craft a malicious parameter that includes special characters or commands, which would then be executed by the operating system.\n",
      "classification": "very promising",
      "cwe": "CWE-78",
      "function_names": [
        "ftpCWD",
        "ftpRMD"
      ],
      "filenames": [
        "Source/Windows/fftp/ftpserv.c"
      ]
    },
    "vulns": {
      "CVE-2023-24042": "A race condition in LightFTP through 2.2 allows an attacker to achieve path traversal via a malformed FTP request. A handler thread can use an overwritten context->FileName.",
      "CVE-2017-1000218": "LightFTP version 1.1 is vulnerable to a buffer overflow in the \"writelogentry\" function resulting a denial of services or a remote code execution."
    }
  },
  "14": {
    "attempt": "a897882984ee4aba1ed4",
    "lead": {
      "headline": "Insufficient encapsulation and management of global fetch and crypto modifications",
      "analysis": "The code modifies global objects (global.fetch and global.crypto) without any safeguarding mechanism against conflicts or restoration after modifications. Functions in 'globals.ts' overwrite these properties possibly conflicting with other modules or parts of the application that might rely on the original implementations of these. Furthermore, the if condition checking for the absence of the global.crypto could inadvertently introduce inconsistency in module behavior across different environments where 'global.crypto' might or might not be initially present.\n",
      "classification": "very promising",
      "cwe": "CWE-915",
      "function_names": [],
      "filenames": [
        "./src/globals.ts"
      ]
    },
    "vulns": {
      "CVE-2024-32652": "The adapter @hono/node-server allows you to run your Hono application on Node.js. Prior to 1.10.1, the application hangs when receiving a Host header with a value that `@hono/node-server` can't handle well. Invalid values are those that cannot be parsed by the `URL` as a hostname such as an empty string, slashes `/`, and other strings. The version 1.10.1 includes the fix for this issue.",
      "CVE-2024-23340": "@hono/node-server is an adapter that allows users to run Hono applications on Node.js. Since v1.3.0, @hono/node-server has used its own Request object with `url` behavior that is unexpected. In the standard API, if the URL contains `..`, here called \"double dots\", the URL string returned by Request will be in the resolved path. However, the `url` in @hono/node-server's Request as does not resolve double dots, so `http://localhost/static/.. /foo.txt` is returned. This causes vulnerabilities when using `serveStatic`. Modern web browsers and a latest `curl` command resolve double dots on the client side, so this issue doesn't affect those using either of those tools. However, problems may occur if accessed by a client that does not resolve them. Version 1.4.1 includes the change to fix this issue. As a workaround, don't use `serveStatic`.\n\n"
    }
  },
  "15": {
    "attempt": "dcc062f2a33f3e9037c2",
    "lead": {
      "headline": "Improper Input Validation in scripts/dist.sh",
      "analysis": "The script scripts/dist.sh takes the version number from the command line argument without proper validation or sanitation. The line VERSION=$1 directly assigns the first command line argument to the VERSION variable, which is later used in commands like git tag and cp. If an attacker manages to pass a specially crafted version string, it could lead to command injection or other unintended behaviors.\n",
      "classification": "very promising",
      "cwe": "CWE-20",
      "function_names": [],
      "filenames": [
        "scripts/dist.sh"
      ]
    },
    "vulns": {
      "CVE-2020-24359": "HashiCorp vault-ssh-helper up to and including version 0.1.6 incorrectly accepted Vault-issued SSH OTPs for the subnet in which a host's network interface was located, rather than the specific IP address assigned to that interface. Fixed in 0.2.0."
    }
  },
  "16": {
    "attempt": "0576f94160c11119260a",
    "lead": {
      "headline": "Cross-Site Scripting (XSS) in Custom Locale Plugin",
      "analysis": "The Custom Locale plugin allows administrators to override locale keys with custom values. \nThese custom values are not properly sanitized before being displayed on the website, \ncreating a cross-site scripting (XSS) vulnerability. \n\nAn attacker could exploit this vulnerability by persuading an administrator to save a \nmalicious payload as a custom locale value. When this value is displayed on the \nwebsite, the attacker's JavaScript code would execute in the context of the victim's browser, \npotentially allowing the attacker to steal session cookies, redirect users to malicious \nwebsites, or perform other malicious actions.\n",
      "classification": "very promising",
      "cwe": "CWE-79",
      "function_names": [],
      "filenames": [
        "js/customLocale.js",
        "cypress/tests/functional/CustomLocale.cy.js"
      ]
    },
    "vulns": {
      "CVE-2023-5897": "Cross-Site Request Forgery (CSRF) in GitHub repository pkp/customLocale prior to 1.2.0-1."
    }
  },
  "17": {
    "attempt": "a54e83c08ff8cb20b761",
    "lead": {
      "headline": "Improper Access Control in 'src/main/java/org/jenkinsci/plugins/skytap/CreateConfigurationStep.java'",
      "analysis": "Insufficient access control allows unauthorized users to create configurations without proper validation. The API endpoint used for creating configurations does not check if the user has the right privileges to perform this operation, potentially allowing attackers to alter system behaviors or access sensitive information.\n",
      "classification": "very promising",
      "cwe": "CWE-284",
      "function_names": [
        "buildCreateConfigRequestURL",
        "executeStep"
      ],
      "filenames": [
        "src/main/java/org/jenkinsci/plugins/skytap/CreateConfigurationStep.java"
      ]
    },
    "vulns": {
      "CVE-2020-2157": "Jenkins Skytap Cloud CI Plugin 2.07 and earlier transmits configured credentials in plain text as part of job configuration forms, potentially resulting in their exposure.",
      "CVE-2019-10366": "Jenkins Skytap Cloud CI Plugin 2.06 and earlier stored credentials unencrypted in job config.xml files on the Jenkins master where they could be viewed by users with Extended Read permission, or access to the master file system."
    }
  },
  "18": {
    "attempt": "54d304d62ef7c0749ecd",
    "lead": {
      "headline": "Possible SQL injection vulnerability in admin-scripts.js",
      "analysis": "The clearCache() function in admin-scripts.js sends an AJAX POST request to admin-ajax.php with the action parameter set to 'tptn_clear_cache'. However, it does not appear to sanitize or validate this user-supplied input before using it in the SQL query. \nIf admin-ajax.php does not properly sanitize the action parameter, it could allow an attacker to inject malicious SQL and potentially read sensitive data, modify data, or execute administrative operations on the database.\n",
      "classification": "very promising",
      "cwe": "CWE-89",
      "function_names": [
        "clearCache"
      ],
      "filenames": [
        "includes/admin/js/admin-scripts.js"
      ]
    },
    "vulns": {
      "CVE-2020-36761": "The Top 10 plugin for WordPress is vulnerable to Cross-Site Request Forgery in versions up to, and including, 2.10.4. This is due to missing or incorrect nonce validation on the tptn_export_tables() function. This makes it possible for unauthenticated attackers to generate an export of the top 10 table via a forged request granted they can trick a site administrator into performing an action such as clicking on a link.",
      "CVE-2023-47238": "Cross-Site Request Forgery (CSRF) vulnerability in WebberZone Top 10 \u2013 WordPress Popular posts by WebberZone plugin <=\u00a03.3.2 versions."
    }
  },
  "19": {
    "attempt": "6a77a2e71b821e9a2ad5",
    "lead": {
      "headline": "Potential Cross-Site Scripting (XSS) in HTML Templates",
      "analysis": "The example/json-template.js file contains functionality to render templates with user input. However, while the function HtmlEscape is defined within the file, there is no guarantee that all user inputs are properly escaped before being inserted into the HTML. This creates the possibility of XSS attacks if any input is not adequately sanitized.\n",
      "classification": "very promising",
      "cwe": "CWE-79",
      "function_names": [
        "HtmlEscape"
      ],
      "filenames": [
        "example/json-template.js"
      ]
    },
    "vulns": {
      "CVE-2021-23388": "The package forms before 1.2.1, from 1.3.0 and before 1.3.2 are vulnerable to Regular Expression Denial of Service (ReDoS) via email validation.",
      "CVE-2017-16015": "Forms is a library for easily creating HTML forms. Versions before 1.3.0 did not have proper html escaping. This means that if the application did not sanitize html on behalf of forms, use of forms may be vulnerable to cross site scripting"
    }
  },
  "20": {
    "attempt": "7a60e341bef35ed7040a",
    "lead": {
      "headline": "Improper Handling of Exceptional Conditions in Build Agents",
      "analysis": "The Gradle and Maven build processes managed by Jenkins do not properly handle errors or exceptional conditions that may occur during the build. Failures in the integration components might not halt the process or might fail silently, leading to incomplete or erroneous build results without adequate notice to the users or system administrators.\n",
      "classification": "very promising",
      "cwe": "CWE-755",
      "function_names": [
        "doGetScanDetail",
        "processLogLine"
      ],
      "filenames": [
        "/src/main/java/hudson/plugins/gradle/enriched/ScanDetailService.java",
        "/src/main/java/hudson/plugins/gradle/injection/GradleEnterpriseExceptionLogProcessor.java"
      ]
    },
    "vulns": {
      "CVE-2023-39152": "Always-incorrect control flow implementation in Jenkins Gradle Plugin 2.8 may result in credentials not being masked (i.e., replaced with asterisks) in the build log in some circumstances."
    }
  },
  "21": {
    "attempt": "e344dde1e9497e1ce36c",
    "lead": {
      "headline": "Use of Unsafe Eval with User-Controllable Data",
      "analysis": "The evaluate() function in JSONPointer.evaluate() uses the unsafe eval() function with user-controlled data from JSON Pointers. This could allow an attacker to execute arbitrary JavaScript code.\n",
      "classification": "very promising",
      "cwe": "CWE-94",
      "function_names": [
        "evaluate"
      ],
      "filenames": [
        "src/declarations/json-pointer.d.ts"
      ]
    },
    "vulns": {
      "CVE-2023-45811": "Synchrony deobfuscator is a javascript cleaner & deobfuscator.  A `__proto__` pollution vulnerability exists in versions before v2.4.4. Successful exploitation could lead to arbitrary code execution. A `__proto__` pollution vulnerability exists in the `LiteralMap` transformer allowing crafted input to modify properties in the Object prototype. A fix has been released in `deobfuscator@2.4.4`. Users are advised to upgrade. Users unable to upgrade should launch node with the [--disable-proto=delete][disable-proto] or [--disable-proto=throw][disable-proto] flags\n"
    }
  },
  "22": {
    "attempt": "3013261d63a587ad325f",
    "lead": {
      "headline": "OS Command Injection in SlackUploader.java",
      "analysis": "The generateScript method constructs a shell command that includes user-supplied input from the filePath parameter without proper sanitization.\nAn attacker could exploit this by entering a malicious payload in the filePath field, which would be executed as part of the shell command. \nThis could allow the attacker to gain unauthorized access to the underlying system.\n",
      "classification": "very promising",
      "cwe": "CWE-78",
      "function_names": [
        "generateScript"
      ],
      "filenames": [
        "src/main/java/SlackUploader.java"
      ]
    },
    "vulns": {
      "CVE-2020-2208": "Jenkins Slack Upload Plugin 1.7 and earlier stores a secret unencrypted in job config.xml files on the Jenkins master where it can be viewed by users with Extended Read permission, or access to the master file system."
    }
  },
  "23": {
    "attempt": "638176d957b4809ce5cc",
    "lead": {
      "headline": "Improper Input Validation in mixme library",
      "analysis": "The mixme library contains several vulnerabilities related to improper input validation. \n\n1. CWE-704 Incorrect Type Conversion or Cast:\n   The mutate function in the mixme library does not properly handle type conversions, leading to potential type confusion vulnerabilities. For example, if an attacker provides an object with mixed data types, the mutate function may incorrectly convert or cast the values, potentially leading to unexpected behavior or security issues.\n\n2. CWE-89 Improper Neutralization of Special Elements used in an SQL Command ('SQL Injection'):\n   The merge and mutate functions in the mixme library do not properly sanitize or validate user input, potentially allowing for SQL injection vulnerabilities. An attacker could craft malicious input that, when passed to these functions, could lead to the execution of arbitrary SQL queries.\n\n3. CWE-79 Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting'):\n   Similar to the SQL injection vulnerability, the merge and mutate functions do not properly sanitize user input, potentially allowing for cross-site scripting (XSS) vulnerabilities. An attacker could craft malicious input that, when passed to these functions, could lead to the injection of arbitrary HTML and script code.\n",
      "classification": "very promising",
      "cwe": "CWE-704",
      "function_names": [
        "mutate",
        "merge"
      ],
      "filenames": [
        "lib/index.js",
        "dist/mixme.esm.js",
        "dist/mixme.umd.js"
      ]
    },
    "vulns": {
      "CVE-2021-28860": "In Node.js mixme, prior to v0.5.1, an attacker can add or alter properties of an object via '__proto__' through the mutate() and merge() functions. The polluted attribute will be directly assigned to every object in the program. This will put the availability of the program at risk causing a potential denial of service (DoS)."
    }
  },
  "24": {
    "attempt": "23bba487494a50cedf5e",
    "lead": {
      "headline": "Missing Encryption of Sensitive Data",
      "analysis": "The ECXSdk class transmits the username and password in plain text as part of the Basic Authentication header. Without using HTTPS, this can expose sensitive credentials to potential interceptors during transmission.\n",
      "classification": "very promising",
      "cwe": "CWE-319",
      "function_names": [
        "doPostForSessionId",
        "connect"
      ],
      "filenames": [
        "src/main/java/com/catalogic/ecx/sdk/ECXSdk.java"
      ]
    },
    "vulns": {
      "CVE-2020-2128": "Jenkins ECX Copy Data Management Plugin 1.9 and earlier stores a password unencrypted in job config.xml files on the Jenkins master where it can be viewed by users with Extended Read permission, or access to the master file system."
    }
  },
  "25": {
    "attempt": "f99b1217f0d312e02ff8",
    "lead": {
      "headline": "Hard-coded Credentials in Source Code",
      "analysis": "In the 'runRadarJob' function of the radar job implementation, the source code hints at potential use of hard-coded or predictable credentials used for background tasks or administrative functions. This practice can lead to unauthorized access if the credentials are exposed or accessible in a public repository or through other means.\n",
      "classification": "very promising",
      "cwe": "CWE-798",
      "function_names": [
        "runRadarJob"
      ],
      "filenames": [
        "packages/backend/src/jobs/radar.ts"
      ]
    },
    "vulns": {
      "CVE-2024-3761": "In lunary-ai/lunary version 1.2.2, the DELETE endpoint located at `packages/backend/src/api/v1/datasets` is vulnerable to unauthorized dataset deletion due to missing authorization and authentication mechanisms. This vulnerability allows any user, even those without a valid token, to delete a dataset by sending a DELETE request to the endpoint. The issue was fixed in version 1.2.8. The impact of this vulnerability is significant as it permits unauthorized users to delete datasets, potentially leading to data loss or disruption of service.",
      "CVE-2024-1741": "lunary-ai/lunary version 1.0.1 is vulnerable to improper authorization, allowing removed members to read, create, modify, and delete prompt templates using an old authorization token. Despite being removed from an organization, these members can still perform operations on prompt templates by sending HTTP requests with their previously captured authorization token. This issue exposes organizations to unauthorized access and manipulation of sensitive template data.",
      "CVE-2024-1902": "lunary-ai/lunary is vulnerable to a session reuse attack, allowing a removed user to change the organization name without proper authorization. The vulnerability stems from the lack of validation to check if a user is still part of an organization before allowing them to make changes. An attacker can exploit this by using an old authorization token to send a PATCH request, modifying the organization's name even after being removed from the organization. This issue is due to incorrect synchronization and affects the orgs.patch route.",
      "CVE-2024-1599": "lunary-ai/lunary version 0.3.0 is vulnerable to unauthorized project creation due to insufficient server-side validation of user account types during project creation. In the free account tier, users are limited to creating only two projects. However, this restriction is enforced only in the web UI and not on the server side, allowing users to bypass the limitation and create an unlimited number of projects without upgrading their account or incurring additional charges. This vulnerability is due to the lack of checks in the project creation endpoint.",
      "CVE-2024-1738": "An incorrect authorization vulnerability exists in the lunary-ai/lunary repository, specifically within the evaluations.get route in the evaluations API endpoint. This vulnerability allows unauthorized users to retrieve the results of any organization's evaluation by simply knowing the evaluation ID, due to the lack of project ID verification in the SQL query. As a result, attackers can gain access to potentially private data contained within the evaluation results.",
      "CVE-2024-1625": "An Insecure Direct Object Reference (IDOR) vulnerability exists in the lunary-ai/lunary application version 0.3.0, allowing unauthorized deletion of any organization's project. The vulnerability is due to insufficient authorization checks in the project deletion endpoint, where the endpoint fails to verify if the project ID provided in the request belongs to the requesting user's organization. As a result, an attacker can delete projects belonging to any organization by sending a crafted DELETE request with the target project's ID. This issue affects the project deletion functionality implemented in the projects.delete route.",
      "CVE-2024-1739": "lunary-ai/lunary is vulnerable to an authentication issue due to improper validation of email addresses during the signup process. Specifically, the server fails to treat email addresses as case insensitive, allowing the creation of multiple accounts with the same email address by varying the case of the email characters. For example, accounts for 'abc@gmail.com' and 'Abc@gmail.com' can both be created, leading to potential impersonation and confusion among users.",
      "CVE-2024-1666": "In lunary-ai/lunary version 1.0.0, an authorization flaw exists that allows unauthorized radar creation. The vulnerability stems from the lack of server-side checks to verify if a user is on a free account during the radar creation process, which is only enforced in the web UI. As a result, attackers can bypass the intended account upgrade requirement by directly sending crafted requests to the server, enabling the creation of an unlimited number of radars without payment.",
      "CVE-2024-1665": "lunary-ai/lunary version 1.0.0 is vulnerable to unauthorized evaluation creation due to missing server-side checks for user account status during evaluation creation. While the web UI restricts evaluation creation to paid accounts, the server-side API endpoint '/v1/evaluations' does not verify if the user has a paid account, allowing users with free or self-hosted accounts to create unlimited evaluations without upgrading their account. This vulnerability is due to the lack of account status validation in the evaluation creation process.",
      "CVE-2024-1626": "An Insecure Direct Object Reference (IDOR) vulnerability exists in the lunary-ai/lunary repository, version 0.3.0, within the project update endpoint. The vulnerability allows authenticated users to modify the name of any project within the system without proper authorization checks, by directly referencing the project's ID in the PATCH request to the '/v1/projects/:projectId' endpoint. This issue arises because the endpoint does not verify if the provided project ID belongs to the currently authenticated user, enabling unauthorized modifications across different organizational projects.",
      "CVE-2024-1740": "In lunary-ai/lunary version 1.0.1, a vulnerability exists where a user removed from an organization can still read, create, modify, and delete logs by re-using an old authorization token. The lunary web application communicates with the server using an 'Authorization' token in the browser, which does not properly invalidate upon the user's removal from the organization. This allows the removed user to perform unauthorized actions on logs and access project and external user details without valid permissions.",
      "CVE-2024-1643": "By knowing an organization's ID, an attacker can join the organization without permission and gain the ability to read and modify all data within that organization. This vulnerability allows unauthorized access and modification of sensitive information, posing a significant security risk. The flaw is due to insufficient verification of user permissions when joining an organization.",
      "CVE-2024-3504": "An improper access control vulnerability exists in lunary-ai/lunary versions up to and including 1.2.2, where an admin can update any organization user to the organization owner. This vulnerability allows the elevated user to delete projects within the organization. The issue is resolved in version 1.2.7.",
      "CVE-2024-5127": "In lunary-ai/lunary versions 1.2.2 through 1.2.25, an improper access control vulnerability allows users on the Free plan to invite other members and assign them any role, including those intended for Paid and Enterprise plans only. This issue arises due to insufficient backend validation of roles and permissions, enabling unauthorized users to join a project and potentially exploit roles and permissions not intended for their use. The vulnerability specifically affects the Team feature, where the backend fails to validate whether a user has paid for a plan before allowing them to send invite links with any role assigned. This could lead to unauthorized access and manipulation of project settings or data."
    }
  },
  "26": {
    "attempt": "7fdcd9a77bec6ec2a26d",
    "lead": {
      "headline": "Insecure Deployment Configuration",
      "analysis": "The integration/wsgi.py example does not set critical security headers which can lead to various attacks such as Cross-Site Request Forgery (CSRF), Clickjacking, Content Type sniffing, etc.\n",
      "classification": "very promising",
      "cwe": "CWE-311",
      "function_names": [],
      "filenames": [
        "integration/wsgi.py"
      ]
    },
    "vulns": {
      "CVE-2024-27454": "orjson.loads in orjson before 3.9.15 does not limit recursion for deeply nested JSON documents."
    }
  },
  "27": {
    "attempt": "43c377394cad450591bf",
    "lead": {
      "headline": "Use of Hardcoded Credentials",
      "analysis": "The code contains hardcoded credentials for the JMX connection in the Foo class and in several other test cases. This can be exploited by an attacker who has access to the source code or binary files to gain unauthorized access.\n",
      "classification": "very promising",
      "cwe": "CWE-798",
      "function_names": [
        "main",
        "jmain"
      ],
      "filenames": [
        "src/test/java/hudson/plugins/deploy/Foo.java",
        "src/test/java/hudson/plugins/deploy/tomcat/Tomcat7xAdapterTest.java",
        "src/test/java/hudson/plugins/deploy/tomcat/Tomcat8xAdapterTest.java"
      ]
    },
    "vulns": {
      "CVE-2017-1000113": "The Deploy to container Plugin stored passwords unencrypted as part of its configuration. This allowed users with Jenkins master local file system access, or users with Extended Read access to the jobs it is used in, to retrieve those passwords. The Deploy to container Plugin now integrates with Credentials Plugin to store passwords securely, and automatically migrates existing passwords."
    }
  },
  "28": {
    "attempt": "87058851686c2d6d03b2",
    "lead": {
      "headline": "Insecure File Upload in Profile Picture",
      "analysis": "The profile picture upload functionality in UserProfileInfo.save_profile_picture_from_url does not properly validate the uploaded file content. This could allow an attacker to upload a malicious file disguised as an image.\nThere is also no implementation to check the file extension and mime type.\n",
      "classification": "very promising",
      "cwe": "CWE-434",
      "function_names": [
        "save_profile_picture_from_url"
      ],
      "filenames": [
        "raptorWeb/authprofiles/models.py"
      ]
    },
    "vulns": {
      "CVE-2023-49078": "raptor-web is a CMS for game server communities that can be used to host information and keep track of players. In version 0.4.4 of raptor-web, it is possible to craft a malicious URL that will result in a reflected cross-site scripting vulnerability. A user controlled URL parameter is loaded into an internal template that has autoescape disabled. This is a cross-site scripting vulnerability that affects all deployments of `raptor-web` on version `0.4.4`. Any victim who clicks on a malicious crafted link will be affected. This issue has been patched 0.4.4.1."
    }
  },
  "29": {
    "attempt": "eac99bbc5df46cdec24f",
    "lead": {
      "headline": "Inadequate Handling and Exposure of Sensitive Information",
      "analysis": "The script writes sensitive cryptographic material to potentially insecure temporary storage (/tmp directory), which can be accessed by other local users and may lead to unauthorized information access, especially in environments where multiple users can access the same machine.\n",
      "classification": "very promising",
      "cwe": "CWE-922",
      "function_names": [],
      "filenames": [
        "bin/generate_rsapem_keys.sh"
      ]
    },
    "vulns": {
      "CVE-2023-49087": "xml-security is a library that implements XML signatures and encryption. Validation of an XML signature requires verification that the hash value of the related XML-document matches a specific DigestValue-value, but also that the cryptographic signature on the SignedInfo-tree (the one that contains the DigestValue) verifies and matches a trusted public key. If an attacker somehow (i.e. by exploiting a bug in PHP's canonicalization function) manages to manipulate the canonicalized version's DigestValue, it would be possible to forge the signature. This issue has been patched in version 1.6.12 and 5.0.0-alpha.13."
    }
  },
  "30": {
    "attempt": "1650494f800871bf2e95",
    "lead": {
      "headline": "Insecure Path Handling in CopyToSlaveBuildWrapper's setUp method",
      "analysis": "The setUp method in CopyToSlaveBuildWrapper doesn't securely handle paths relative to the workspace, which could be exploited to access or manipulate files outside the intended build workspace, leading to potential security breaches.\n",
      "classification": "very promising",
      "cwe": "CWE-22",
      "function_names": [
        "setUp"
      ],
      "filenames": [
        "src/main/java/com/michelin/cio/hudson/plugins/copytoslave/CopyToSlaveBuildWrapper.java"
      ]
    },
    "vulns": {
      "CVE-2018-1000148": "An exposure of sensitive information vulnerability exists in Jenkins Copy To Slave Plugin version 1.4.4 and older in CopyToSlaveBuildWrapper.java that allows attackers with permission to configure jobs to read arbitrary files from the Jenkins master file system."
    }
  },
  "31": {
    "attempt": "e3c2b5bc2573ae0e4968",
    "lead": {
      "headline": "Memory buffer operations without bounds checking in memcpy usage",
      "analysis": "The memcpy functions across several files do not seem to enforce boundary checks before copying memory. This could potentially lead to buffer overflow vulnerabilities if the size parameters are not properly validated.\n",
      "classification": "very promising",
      "cwe": "CWE-120",
      "function_names": [
        "js_strdup",
        "jsV_newmemstring"
      ],
      "filenames": [
        "jsrun.c"
      ]
    },
    "vulns": {
      "CVE-2021-33797": "Buffer-overflow in jsdtoa.c in Artifex MuJS in versions 1.0.1 to 1.1.1. An integer overflow happens when js_strtod() reads in floating point exponent, which leads to a buffer overflow in the pointer *d.",
      "CVE-2021-33796": "In MuJS before version 1.1.2, a use-after-free flaw in the regexp source property access may cause denial of service.\n\n",
      "CVE-2020-24343": "Artifex MuJS through 1.0.7 has a use-after-free in jsrun.c because of unconditional marking in jsgc.c.",
      "CVE-2019-11411": "An issue was discovered in Artifex MuJS 1.0.5. The Number#toFixed() and numtostr implementations in jsnumber.c have a stack-based buffer overflow.",
      "CVE-2019-11413": "An issue was discovered in Artifex MuJS 1.0.5. It has unlimited recursion because the match function in regexp.c lacks a depth check.",
      "CVE-2019-11412": "An issue was discovered in Artifex MuJS 1.0.5. jscompile.c can cause a denial of service (invalid stack-frame jump) because it lacks an ENDTRY opcode call.",
      "CVE-2019-12798": "An issue was discovered in Artifex MuJS 1.0.5. regcompx in regexp.c does not restrict regular expression program size, leading to an overflow of the parsed syntax list size.",
      "CVE-2021-45005": "Artifex MuJS v1.1.3 was discovered to contain a heap buffer overflow which is caused by conflicting JumpList of nested try/finally statements.",
      "CVE-2022-30975": "In Artifex MuJS through 1.2.0, jsP_dumpsyntax in jsdump.c has a NULL pointer dereference, as demonstrated by mujs-pp.",
      "CVE-2022-30974": "compile in regexp.c in Artifex MuJS through 1.2.0 results in stack consumption because of unlimited recursion, a different issue than CVE-2019-11413.",
      "CVE-2022-44789": "A logical issue in O_getOwnPropertyDescriptor() in Artifex MuJS 1.0.0 through 1.3.x before 1.3.2 allows an attacker to achieve Remote Code Execution through memory corruption, via the loading of a crafted JavaScript file.",
      "CVE-2020-22886": "Buffer overflow vulnerability in function jsG_markobject in jsgc.c in mujs before 1.0.8, allows remote attackers to cause a denial of service.",
      "CVE-2020-22885": "Buffer overflow vulnerability in mujs before 1.0.8 due to recursion in the GC scanning phase, allows remote attackers to cause a denial of service.",
      "CVE-2018-5759": "jsparse.c in Artifex MuJS through 1.0.2 does not properly maintain the AST depth for binary expressions, which allows remote attackers to cause a denial of service (excessive recursion) via a crafted file.",
      "CVE-2018-6191": "The js_strtod function in jsdtoa.c in Artifex MuJS through 1.0.2 has an integer overflow because of incorrect exponent validation."
    }
  },
  "32": {
    "attempt": "ac867b51adc26269e6a2",
    "lead": {
      "headline": "Improper Neutralization of Special Elements used in an OS Command",
      "analysis": "The codebase contains code that executes OS commands without properly sanitizing user input. This could allow attackers to inject malicious commands into the system and potentially gain unauthorized access or perform other malicious actions.\n",
      "classification": "very promising",
      "cwe": "CWE-78",
      "function_names": [
        "run_command"
      ],
      "filenames": [
        "nautobot_device_onboarding/tasks.py"
      ]
    },
    "vulns": {
      "CVE-2023-48700": "The Nautobot Device Onboarding plugin uses the netmiko and NAPALM libraries to simplify the onboarding process of a new device into Nautobot down to, in many cases, an IP Address and a Location. Starting in version 2.0.0 and prior to version 3.0.0, credentials provided to onboarding task are visible via Job Results from an execution of an Onboarding Task. Version 3.0.0 fixes this issue; no known workarounds are available. Mitigation recommendations include deleting all Job Results for any onboarding task to remove clear text credentials from database entries that were run while on v2.0.X, upgrading to v3.0.0, and rotating any exposed credentials."
    }
  },
  "33": {
    "attempt": "d515dcab1c5c2346221a",
    "lead": {
      "headline": "Unsafe Token Decoding Implementation",
      "analysis": "The decodeToken function in src/utils.ts assumes the token is correctly formatted and base64 encoded without any validation or error handling. This can result in the application crashing if an invalid token is provided, creating a potential denial of service (DoS) scenario.\n",
      "classification": "very promising",
      "cwe": "CWE-704",
      "function_names": [
        "decodeToken"
      ],
      "filenames": [
        "src/utils.ts"
      ]
    },
    "vulns": {
      "CVE-2024-29036": "Saleor Storefront is software for building e-commerce experiences. Prior to commit 579241e75a5eb332ccf26e0bcdd54befa33f4783, when any user authenticates in the storefront, anonymous users are able to access their data. The session is leaked through cache and can be accessed by anyone. Users should upgrade to a version that incorporates commit 579241e75a5eb332ccf26e0bcdd54befa33f4783 or later to receive a patch. A possible workaround is to temporarily disable authentication by changing the usage of `createSaleorAuthClient()`."
    }
  },
  "34": {
    "attempt": "a8c42492e06d16059c94",
    "lead": {
      "headline": "DOM-based Cross-Site Scripting Vulnerability in getSelectorFromElement",
      "analysis": "The function getSelectorFromElement in bootstrap.js can be exploited for DOM-based XSS. It uses element.getAttribute('data-target') and element.getAttribute('href') without proper sanitization before further processing these values as selectors.\n",
      "classification": "very promising",
      "cwe": "CWE-79",
      "function_names": [
        "getSelectorFromElement"
      ],
      "filenames": [
        "examples/MvcExample/wwwroot/lib/bootstrap/dist/js/bootstrap.js"
      ]
    },
    "vulns": {
      "CVE-2024-23838": "TrueLayer.NET is the .Net client for TrueLayer.  The vulnerability could potentially allow a malicious actor to gain control over the destination URL of the HttpClient used in the API classes. For applications using the SDK, requests to unexpected resources on local networks or to the internet could be made which could lead to information disclosure. The issue can be mitigated by having strict egress rules limiting the destinations to which requests can be made, and applying strict validation to any user input passed to the `truelayer-dotnet` library. Versions of TrueLayer.Client `v1.6.0` and later are not affected."
    }
  },
  "35": {
    "attempt": "9b8caa4e405bd86c887f",
    "lead": {
      "headline": "SQL Injection via User-Provided Data",
      "analysis": "User-provided data is used without proper sanitization within SQL queries. For example: in dashmachine/main/read_config.py, values from config.ini are directly embedded into queries without proper parameterization or escaping, potentially allowing SQL injection attacks. This could allow an attacker to manipulate database content or even gain unauthorized access to the database.\n",
      "classification": "very promising",
      "cwe": "CWE-89",
      "function_names": [
        "read_config"
      ],
      "filenames": [
        "dashmachine/main/read_config.py"
      ]
    },
    "vulns": {
      "CVE-2023-6899": "A vulnerability classified as problematic was found in rmountjoy92 DashMachine 0.5-4. Affected by this vulnerability is an unknown functionality of the file /settings/save_config of the component Config Handler. The manipulation of the argument value_template leads to code injection. The exploit has been disclosed to the public and may be used. The identifier VDB-248257 was assigned to this vulnerability.",
      "CVE-2023-6900": "A vulnerability, which was classified as critical, has been found in rmountjoy92 DashMachine 0.5-4. Affected by this issue is some unknown functionality of the file /settings/delete_file. The manipulation of the argument file leads to path traversal: '../filedir'. The exploit has been disclosed to the public and may be used. VDB-248258 is the identifier assigned to this vulnerability."
    }
  },
  "36": {
    "attempt": "a77a096fbcd374ed9011",
    "lead": {
      "headline": "Cross-Site Request Forgery (CSRF) vulnerability",
      "analysis": "The plugin does not implement any CSRF protection mechanism, allowing an attacker to potentially perform unauthorized actions such as updating plugin settings or modifying user data by tricking an authenticated user into visiting a malicious website.\n",
      "classification": "very promising",
      "cwe": "CWE-352",
      "function_names": [],
      "filenames": []
    },
    "vulns": {
      "CVE-2023-32298": "Unauth. Reflected Cross-Site Scripting (XSS) vulnerability in Kathy Darling Simple User Listing plugin <=\u00a01.9.2 versions."
    }
  },
  "37": {
    "attempt": "6552546fece523d0a4fb",
    "lead": {
      "headline": "Stored XSS in SoundsBuildTask.DescriptorImpl.doTestSound",
      "analysis": "The function SoundsBuildTask.DescriptorImpl.doTestSound does not properly sanitize user-supplied input before including it in a response that is marked as OK. This allows attackers able to supply a crafted payload to selectedSound to execute arbitrary Javascript in the victim's browser.\n",
      "classification": "very promising",
      "cwe": "CWE-79",
      "function_names": [
        "net.hurstfrost.hudson.sounds.SoundsBuildTask$DescriptorImpl.doTestSound"
      ],
      "filenames": [
        "src/main/java/net/hurstfrost/hudson/sounds/SoundsBuildTask.java"
      ]
    },
    "vulns": {
      "CVE-2020-2098": "A cross-site request forgery vulnerability in Jenkins Sounds Plugin 0.5 and earlier allows attacker to execute arbitrary OS commands as the OS user account running Jenkins.",
      "CVE-2020-2097": "Jenkins Sounds Plugin 0.5 and earlier does not perform permission checks in URLs performing form validation, allowing attackers with Overall/Read access to execute arbitrary OS commands as the OS user account running Jenkins."
    }
  },
  "38": {
    "attempt": "f362fd8a1936dffb770e",
    "lead": {
      "headline": "Potential Directory Traversal via Resources.getResource",
      "analysis": "The use of Resources.getResource in multiple instances can lead to directory traversal attacks if the input file path is derived from an untrusted source. This functionality is located in various test files and could enable an attacker to access unauthorized files and directories by manipulating the file paths.\n",
      "classification": "very promising",
      "cwe": "CWE-22",
      "function_names": [],
      "filenames": [
        "src/test/java/org/jenkinsci/plugins/periodicbackup/NullStorageTest.java",
        "src/test/java/org/jenkinsci/plugins/periodicbackup/UtilTest.java",
        "src/test/java/org/jenkinsci/plugins/periodicbackup/TarGzStorageTest.java"
      ]
    },
    "vulns": {
      "CVE-2017-1000086": "The Periodic Backup Plugin did not perform any permission checks, allowing any user with Overall/Read access to change its settings, trigger backups, restore backups, download backups, and also delete all previous backups via log rotation. Additionally, the plugin was not requiring requests to its API be sent via POST, thereby opening itself to Cross-Site Request Forgery attacks."
    }
  },
  "39": {
    "attempt": "e45d71edec3a824bcdcf",
    "lead": {
      "headline": "Insecure usage of random in saferandom function",
      "analysis": "The saferandom function utilizes the standard rand() function for randomness, which is not cryptographically secure. This makes it predictable and vulnerable to attacks where randomness is a vital component of security (e.g., generating tokens).\n",
      "classification": "very promising",
      "cwe": "CWE-330",
      "function_names": [
        "saferandom"
      ],
      "filenames": [
        "src/sb.c"
      ]
    },
    "vulns": {
      "CVE-2024-25115": "RedisBloom adds a set of probabilistic data structures to Redis. Starting in version 2.0.0 and prior to version 2.4.7 and 2.6.10, specially crafted `CF.LOADCHUNK` commands may be used by authenticated users to perform heap overflow, which may lead to remote code execution. The problem is fixed in RedisBloom 2.4.7 and 2.6.10.\n",
      "CVE-2024-25116": "RedisBloom adds a set of probabilistic data structures to Redis. Starting in version 2.0.0 and prior to version 2.4.7 and 2.6.10, authenticated users can use the `CF.RESERVE` command to trigger a runtime assertion and termination of the Redis server process. The problem is fixed in RedisBloom 2.4.7 and 2.6.10."
    }
  },
  "40": {
    "attempt": "a0e6dff88d6e222e6845",
    "lead": {
      "headline": "Improper Neutralization of Special Elements used in an OS Command ('OS Command Injection')",
      "analysis": "The code does not properly sanitize user-provided input before using it in OS commands. This can allow an attacker to inject malicious commands, leading to remote code execution vulnerabilities. The issue is present in the deployment and connection handling logic, where user-controlled values are used in system calls without proper validation.\n",
      "classification": "very promising",
      "cwe": "CWE-78",
      "function_names": [
        "connect",
        "deployArtifact",
        "uninstallArtifact"
      ],
      "filenames": [
        "src/main/java/org/jenkinsci/plugins/websphere/services/deployment/AbstractDeploymentService.java",
        "src/main/java/org/jenkinsci/plugins/websphere_deployer/WebSphereDeployerPlugin.java",
        "src/main/java/org/jenkinsci/plugins/websphere_deployer/LibertyDeployerPlugin.java"
      ]
    },
    "vulns": {
      "CVE-2020-2108": "Jenkins WebSphere Deployer Plugin 1.6.1 and earlier does not configure the XML parser to prevent XXE attacks which can be exploited by a user with Job/Configure permissions.",
      "CVE-2019-16560": "A cross-site request forgery vulnerability in Jenkins WebSphere Deployer Plugin 1.6.1 and earlier allows attackers to perform connection tests and determine whether files with an attacker-specified path exist on the Jenkins master file system.",
      "CVE-2019-16561": "Jenkins WebSphere Deployer Plugin 1.6.1 and earlier allows users with Overall/Read access to disable SSL/TLS certificate and hostname validation for the entire Jenkins master JVM.",
      "CVE-2019-16559": "A missing permission check in Jenkins WebSphere Deployer Plugin 1.6.1 and earlier allows attackers with Overall/Read permission to perform connection tests and determine whether files with an attacker-specified path exist on the Jenkins master file system."
    }
  },
  "41": {
    "attempt": "62befb2a352468d027fb",
    "lead": {
      "headline": "Improper Control of Dynamically-Managed Code Resources",
      "analysis": "The codebase contains functionality that allows for the deserialization of untrusted data, which can potentially lead to remote code execution vulnerabilities if the deserialized objects are not properly validated. This is a known issue with the orjson.loads() function, and it is important to ensure that the function is only used with trusted data.\n",
      "classification": "very promising",
      "cwe": "CWE-502",
      "function_names": [
        "loads"
      ],
      "filenames": [
        "pysrc/orjson/__init__.py"
      ]
    },
    "vulns": {
      "CVE-2024-27454": "orjson.loads in orjson before 3.9.15 does not limit recursion for deeply nested JSON documents."
    }
  },
  "42": {
    "attempt": "8ee7187510c4e1739938",
    "lead": {
      "headline": "Improper Neutralization of Special Elements used in an OS Command ('OS Command Injection')",
      "analysis": "The script scripts/deploy-docs.sh uses the git command with user-controlled input, which could potentially lead to OS command injection. Specifically, the script uses the git clone, git checkout, and git push commands with variables that could be controlled by an attacker, such as $TARGET_REPO and $TARGET_BRANCH. If an attacker can manipulate these variables, they could potentially execute arbitrary OS commands on the system running the script.\n",
      "classification": "very promising",
      "cwe": "CWE-78",
      "function_names": [
        "git clone",
        "git checkout",
        "git push"
      ],
      "filenames": [
        "scripts/deploy-docs.sh"
      ]
    },
    "vulns": {
      "CVE-2023-4914": "Relative Path Traversal in GitHub repository cecilapp/cecil prior to 7.47.1.",
      "CVE-2023-4913": "Cross-site Scripting (XSS) - Reflected in GitHub repository cecilapp/cecil prior to 7.47.1."
    }
  },
  "43": {
    "attempt": "6f8212a0482bf7bf8c87",
    "lead": {
      "headline": "SQL Injection vulnerability in login form",
      "analysis": "The login form on the site is vulnerable to SQL injection attacks. An attacker can inject malicious SQL code into the username or password fields, which can be used to extract sensitive data from the database or gain unauthorized access to the system.\n",
      "classification": "very promising",
      "cwe": "CWE-89",
      "function_names": [
        "login",
        "authenticate"
      ],
      "filenames": [
        "src/main/java/com/example/app/controllers/AuthController.java"
      ]
    },
    "vulns": {
      "CVE-2019-10378": "Jenkins TestLink Plugin 3.16 and earlier stores credentials unencrypted in its global configuration file on the Jenkins master where they can be viewed by users with access to the master file system.",
      "CVE-2018-1000113": "A cross-site scripting vulnerability exists in Jenkins TestLink Plugin 2.12 and earlier in TestLinkBuildAction/summary.jelly and others that allow an attacker who can control e.g. TestLink report names to have Jenkins serve arbitrary HTML and JavaScript"
    }
  },
  "44": {
    "attempt": "951a21ff1a7cea48b147",
    "lead": {
      "headline": "Command injection in getCmdWithArgs function",
      "analysis": "The getCmdWithArgs function constructs a command string based on user input without properly sanitizing or validating the input. This makes the application vulnerable to command injection attacks, where an attacker can inject malicious code into the command string, which will be executed by the system with the same privileges as the application.\n\nFor example, an attacker could inject shell commands by providing input like: '; rm -rf /* ;' for the textToSpeech field, which would result in the command string containing the malicious code and executing it when the command is executed.\n",
      "classification": "very promising",
      "cwe": "CWE-78",
      "function_names": [
        "getCmdWithArgs",
        "getGoogleSpeechCmdWithArgs",
        "getFestivalCmdWithArgs"
      ],
      "filenames": [
        "app.js"
      ]
    },
    "vulns": {
      "CVE-2019-25158": "A vulnerability has been found in pedroetb tts-api up to 2.1.4 and classified as critical. This vulnerability affects the function onSpeechDone of the file app.js. The manipulation leads to os command injection. Upgrading to version 2.2.0 is able to address this issue. The patch is identified as 29d9c25415911ea2f8b6de247cb5c4607d13d434. It is recommended to upgrade the affected component. VDB-248278 is the identifier assigned to this vulnerability."
    }
  },
  "45": {
    "attempt": "d3bc8420787e8c62d9b4",
    "lead": {
      "headline": "Exposed sensitive information in base64 encoding",
      "analysis": "The AssemblaHttpClient constructs an authorization header using base64 encoded strings, which includes usernames and passwords. While base64 is commonly used for basic HTTP authentication, it does not encrypt or hide the encoded data from anyone who intercepts the HTTP request, making it trivial to decode and obtain the credentials. This vulnerability is particularly concerning if connections are not secured via SSL/TLS, exposing credentials to potential man-in-the-middle attacks.\n",
      "classification": "very promising",
      "cwe": "CWE-319",
      "function_names": [
        "AssemblaHttpClient"
      ],
      "filenames": [
        "src/main/java/jenkins/plugin/assembla/api/AssemblaHttpClient.java"
      ]
    },
    "vulns": {
      "CVE-2019-10420": "Jenkins Assembla Plugin stores credentials unencrypted in its global configuration file on the Jenkins master where they can be viewed by users with access to the master file system."
    }
  },
  "46": {
    "attempt": "3ea64b21b287e2fbca02",
    "lead": {
      "headline": "Improper Validation of Specified Quantity in Input",
      "analysis": "The vulnerability in the codebase is related to CWE-1284 Improper Validation of Specified Quantity in Input. The vulnerability could allow an attacker to provide a malicious input that may not be properly validated, potentially leading to unexpected behavior or security issues.\n",
      "classification": "very promising",
      "cwe": "CWE-1284",
      "function_names": [
        "mjml_to_html"
      ],
      "filenames": [
        "mjml/mjml2html.py"
      ]
    },
    "vulns": {
      "CVE-2024-26151": "The `mjml` PyPI package, found at the `FelixSchwarz/mjml-python` GitHub repo, is an unofficial Python port of MJML, a markup language created by Mailjet. All users of `FelixSchwarz/mjml-python` who insert untrusted data into mjml templates unless that data is checked in a very strict manner. User input like `&lt;script&gt;` would be rendered as `<script>` in the final HTML output. The attacker must be able to control some data which is later injected in an mjml template which is then send out as email to other users. The attacker could control contents of email messages sent through the platform. The problem has been fixed in version 0.11.0 of this library. Versions before 0.10.0 are not affected by this security issue. As a workaround, ensure that potentially untrusted user input does not contain any sequences which could be rendered as HTML."
    }
  },
  "47": {
    "attempt": "c983b0b4f655eec7b8f9",
    "lead": {
      "headline": "Improper Error Handling in multibyte to widechar Conversion",
      "analysis": "The mbstowcs_escape_invalid function does not handle all invalid multibyte to wide character conversion errors properly. Specifically, if the function encounters an invalid multibyte sequence, it attempts to write an escape sequence to the destination buffer without ensuring there is enough space. This can lead to buffer overflows or data corruption.\n\nThis issue could be exploited by creating specially crafted multibyte inputs that cause overflows or writes to unintended memory areas.\n",
      "classification": "very promising",
      "cwe": "CWE-120",
      "function_names": [
        "mbstowcs_escape_invalid"
      ],
      "filenames": [
        "mbstowcs_escape_invalid.c"
      ]
    },
    "vulns": {
      "CVE-2022-48682": "In deletefiles in FDUPES before 2.2.0, a TOCTOU race condition allows arbitrary file deletion via a symlink."
    }
  },
  "48": {
    "attempt": "53ffd9599c33eba0fcda",
    "lead": {
      "headline": "Buffer overflow in OpenEXRImage.cpp",
      "analysis": "Within the OpenEXRImage.cpp file, the OpenEXRImage constructor directly uses input data to allocate memory and handle image data. The size of input images are not checked, allowing a specially crafted image file to trigger a buffer overflow by specifying larger image dimensions than expected, leading to potential memory corruption or arbitrary code execution.\n",
      "classification": "very promising",
      "cwe": "CWE-120",
      "function_names": [
        "OpenEXRImage::OpenEXRImage"
      ],
      "filenames": [
        "src/model/OpenEXRImage.cpp"
      ]
    },
    "vulns": {
      "CVE-2023-50245": "OpenEXR-viewer is a viewer for OpenEXR files with detailed metadata probing. Versions prior to 0.6.1 have a memory overflow vulnerability. This issue is fixed in version 0.6.1."
    }
  },
  "49": {
    "attempt": "900d3106b8a5b2fb3637",
    "lead": {
      "headline": "Insecure handling of input inside DOMPurify for inline event handlers",
      "analysis": "Input sanitization is done to filter out malicious content. However, inline event handlers (like onclick, onerror, etc.) might still pose a risk if not properly managed. Malicious scripts can be executed if an attacker manages to pass sanitized inputs that include these event handlers.\n",
      "classification": "very promising",
      "cwe": "CWE-79",
      "function_names": [
        "_sanitizeAttributes",
        "addCSSRules",
        "DOMPurify.sanitize"
      ],
      "filenames": [
        "src/purify.js"
      ]
    },
    "vulns": {
      "CVE-2019-25155": "DOMPurify before 1.0.11 allows reverse tabnabbing in demos/hooks-target-blank-demo.html because links lack a 'rel=\"noopener noreferrer\"' attribute.",
      "CVE-2020-26870": "Cure53 DOMPurify before 2.0.17 allows mutation XSS. This occurs because a serialize-parse roundtrip does not necessarily return the original DOM tree, and a namespace can change from HTML to MathML, as demonstrated by nesting of FORM elements.",
      "CVE-2019-20374": "A mutation cross-site scripting (XSS) issue in Typora through 0.9.9.31.2 on macOS and through 0.9.81 on Linux leads to Remote Code Execution through Mermaid code blocks. To exploit this vulnerability, one must open a file in Typora. The XSS vulnerability is then triggered due to improper HTML sanitization. Given that the application is based on the Electron framework, the XSS leads to remote code execution in an unsandboxed environment.",
      "CVE-2019-16728": "DOMPurify before 2.0.1 allows XSS because of innerHTML mutation XSS (mXSS) for an SVG element or a MATH element, as demonstrated by Chrome and Safari."
    }
  },
  "50": {
    "attempt": "4c8b76d1efa2c43b72db",
    "lead": {
      "headline": "Arbitrary Object Deserialization",
      "analysis": "The XmlMapper allows deserialization of arbitrary XML data into Java objects. Without proper validation or security measures, this can introduce vulnerabilities like remote code execution if malicious XML data is processed.\n",
      "classification": "very promising",
      "cwe": "CWE-502",
      "function_names": [
        "readValue"
      ],
      "filenames": [
        "src/main/java/com/fasterxml/jackson/dataformat/xml/XmlMapper.java"
      ]
    },
    "vulns": {
      "CVE-2016-7051": "XmlMapper in the Jackson XML dataformat component (aka jackson-dataformat-xml) before 2.7.8 and 2.8.x before 2.8.4 allows remote attackers to conduct server-side request forgery (SSRF) attacks via vectors related to a DTD.",
      "CVE-2016-3720": "XML external entity (XXE) vulnerability in XmlMapper in the Data format extension for Jackson (aka jackson-dataformat-xml) allows attackers to have unspecified impact via unknown vectors."
    }
  },
  "51": {
    "attempt": "f473a968b6be33af3db9",
    "lead": {
      "headline": "Potentially unsafe use of subprocess.run in update-expected-html.py",
      "analysis": "The script update-expected-html.py makes use of subprocess.run to execute external commands which can be dangerous if the arguments to this command are not properly sanitized. If inputs come from an untrusted source, an attacker could exploit this to execute arbitrary commands on the server.\n",
      "classification": "very promising",
      "cwe": "CWE-78",
      "function_names": [
        "_update_expected_html"
      ],
      "filenames": [
        "tools/update-expected-html.py"
      ]
    },
    "vulns": {
      "CVE-2024-26151": "The `mjml` PyPI package, found at the `FelixSchwarz/mjml-python` GitHub repo, is an unofficial Python port of MJML, a markup language created by Mailjet. All users of `FelixSchwarz/mjml-python` who insert untrusted data into mjml templates unless that data is checked in a very strict manner. User input like `&lt;script&gt;` would be rendered as `<script>` in the final HTML output. The attacker must be able to control some data which is later injected in an mjml template which is then send out as email to other users. The attacker could control contents of email messages sent through the platform. The problem has been fixed in version 0.11.0 of this library. Versions before 0.10.0 are not affected by this security issue. As a workaround, ensure that potentially untrusted user input does not contain any sequences which could be rendered as HTML."
    }
  },
  "52": {
    "attempt": "2ad56e7b467ee1842927",
    "lead": {
      "headline": "Potential Command Injection Vulnerability in debug.sh",
      "analysis": "The debug.sh script uses mvnDebug -q hpi:run to initiate a Maven build in debug mode. Since mvnDebug directly executes commands based on its arguments, there's a potential for command injection. If an attacker can control any of these arguments, they could execute arbitrary shell commands. This vulnerability can be exploited if the script is used in an environment where user input is somehow fed into these arguments without proper sanitization.\n",
      "classification": "very promising",
      "cwe": "CWE-78",
      "function_names": [],
      "filenames": [
        "debug.sh"
      ]
    },
    "vulns": {
      "CVE-2023-46658": "Jenkins MSTeams Webhook Trigger Plugin 0.1.1 and earlier uses a non-constant time comparison function when checking whether the provided and expected webhook token are equal, potentially allowing attackers to use statistical methods to obtain a valid webhook token."
    }
  },
  "53": {
    "attempt": "1ed47f917bc7d876c00c",
    "lead": {
      "headline": "Insecure Cryptographic Storage",
      "analysis": "The codebase stores sensitive information, such as user passwords, without proper cryptographic protection. This can lead to the exposure of sensitive data if the application is compromised.\n",
      "classification": "very promising",
      "cwe": "CWE-312",
      "function_names": [
        "update_ss_config_from_dict"
      ],
      "filenames": [
        "apps/sspanel/models.py"
      ]
    },
    "vulns": {
      "CVE-2023-38941": "django-sspanel v2022.2.2 was discovered to contain a remote command execution (RCE) vulnerability via the component sspanel/admin_view.py -> GoodsCreateView._post."
    }
  },
  "54": {
    "attempt": "0266fcee5fee95663214",
    "lead": {
      "headline": "Command execution through unchecked git repository paths in RPM build script",
      "analysis": "In the script 'test/centos-image/gateway.sh', there is a direct call to 'git archive' using parameters obtained from environment variables and files without adequate sanitization or validation. This exposes the script to arbitrary command execution through git hooks when cloning or manipulating the repository paths. The command injection vulnerability arises because of the direct inclusion of potentially malicious variable content in critical commands.\n",
      "classification": "very promising",
      "cwe": "CWE-77",
      "function_names": [
        "git"
      ],
      "filenames": [
        "test/centos-image/gateway.sh"
      ]
    },
    "vulns": {
      "CVE-2024-34713": "sshproxy is used on a gateway to transparently proxy a user SSH connection on the gateway to an internal host via SSH. Prior to version 1.6.3, any user authorized to connect to a ssh server using `sshproxy` can inject options to the `ssh` command executed by `sshproxy`. All versions of `sshproxy` are impacted. The problem is patched starting in version 1.6.3. The only workaround is to use the `force_command` option in `sshproxy.yaml`, but it's rarely relevant."
    }
  },
  "55": {
    "attempt": "1ffae72627093649aba2",
    "lead": {
      "headline": "Potential Cross-site Scripting (XSS) in custom.html",
      "analysis": "The doc/custom.html file contains JavaScript code that manipulates the DOM. Specifically, it retrieves the contents of an element with an ID of \"xx\" using jQuery's $() function and prepends it to a form. Further, it accesses all <h2> elements and updates their IDs by taking the text content, converting it to lowercase, and replacing spaces with hyphens. While there is no user input being directly included, if any of the manipulated content can be influenced by user input, it could lead to a reflected XSS vulnerability.\n",
      "classification": "very promising",
      "cwe": "CWE-79",
      "function_names": [],
      "filenames": [
        "doc/custom.html"
      ]
    },
    "vulns": {
      "CVE-2021-31402": "The dio package 4.0.0 for Dart allows CRLF injection if the attacker controls the HTTP method string, a different vulnerability than CVE-2020-35669."
    }
  },
  "56": {
    "attempt": "beb6500c8bf67aad451f",
    "lead": {
      "headline": "Fetching remote content without validation",
      "analysis": "The script pkg/sbom/generator/spdx/testdata/generate.sh uses curl to fetch remote files without validating their content or source. This can lead to multiple vulnerabilities, including supply chain attacks where an attacker could serve malicious files. Additionally, the content is piped through tar without proper checks, increasing the risk of command injection or file system compromise if the downloaded content is malicious.\n",
      "classification": "very promising",
      "cwe": "CWE-494",
      "function_names": [],
      "filenames": [
        "pkg/sbom/generator/spdx/testdata/generate.sh"
      ]
    },
    "vulns": {
      "CVE-2024-36127": "apko is an apk-based OCI image builder. apko exposures HTTP basic auth credentials from repository and keyring URLs in log output. This vulnerability is fixed in v0.14.5."
    }
  },
  "57": {
    "attempt": "c83994e7bb2998e7848e",
    "lead": {
      "headline": "Use of user-controlled format strings",
      "analysis": "The make_temp_file function in tests/util.c uses sprintf with a user-provided prefix as part of the format string. Allowing an externally controlled format string can lead to memory corruption if the string contains unexpected format specifiers. An attacker may be able to use format string injection to leak data or execute arbitrary code.\n",
      "classification": "very promising",
      "cwe": "CWE-134",
      "function_names": [
        "make_temp_file"
      ],
      "filenames": [
        "tests/util.c"
      ]
    },
    "vulns": {
      "CVE-2023-49287": "TinyDir is a lightweight C directory and file reader. Buffer overflows in the `tinydir_file_open()` function. This vulnerability has been patched in version 1.2.6."
    }
  },
  "58": {
    "attempt": "86d292641da201937d36",
    "lead": {
      "headline": "Memory Management Issues in JWT Verification",
      "analysis": "In function jwt_verify_sha_pem, there is a potential for improper memory management, which could lead to vulnerabilities such as memory leaks or buffer overflows. The use of alloca for allocating memory for signature operations without sufficient size checks or the handling of OpenSSL errors inadequate, leading to potential issues when processing large or malformed JWT tokens. This can result in denial-of-service scenarios or unauthorized access if memory corruption occurs.\n",
      "classification": "very promising",
      "cwe": "CWE-119",
      "function_names": [
        "jwt_verify_sha_pem"
      ],
      "filenames": [
        "openssl.c"
      ]
    },
    "vulns": {
      "CVE-2024-25191": "php-jwt 1.0.0 uses strcmp (which is not constant time) to verify authentication, which makes it easier to bypass authentication via a timing side channel."
    }
  },
  "59": {
    "attempt": "d485765e9fd427f31b8b",
    "lead": {
      "headline": "Improper Neutralization of Special Elements in Output Used by a Downstream Component",
      "analysis": "The code appears to be vulnerable to CWE-74 Improper Neutralization of Special Elements in Output Used by a Downstream Component. This vulnerability could allow an attacker to inject malicious content into the application's output, potentially leading to cross-site scripting (XSS), code injection, or other attacks.\n\nTo develop a POC exploit, the researcher would need to identify any locations where user-supplied input is directly included in the application's output without proper sanitization or encoding. This could involve fuzzing the application with a range of special characters, HTML tags, and other malicious input to identify potential weaknesses.\n",
      "classification": "very promising",
      "cwe": "CWE-79",
      "function_names": [
        "updatePage",
        "replaceWith"
      ],
      "filenames": [
        "webui/static/application.js"
      ]
    },
    "vulns": {
      "CVE-2023-37279": "Faktory is a language-agnostic persistent background job server. Prior to version 1.8.0, the Faktory web dashboard can suffer from denial of service by a crafted malicious url query param `days`. The vulnerability is related to how the backend reads the `days` URL query parameter in the Faktory web dashboard. The value is used directly without any checks to create a string slice. If a very large value is provided, the backend server ends up using a significant amount of memory and causing it to crash. Version 1.8.0 fixes this issue."
    }
  },
  "60": {
    "attempt": "aeea7a161b04db23de61",
    "lead": {
      "headline": "Lack of integrity checking when downloading the cpp-driver",
      "analysis": "The install_ubuntu_packages.sh script downloads the datastax/cpp-driver repository from a Git URL without any integrity checks (e.g., verifying a cryptographic hash or signature). This could potentially lead to a supply chain attack, where an attacker compromises the Git repository and injects malicious code into the downloaded package.\n",
      "classification": "very promising",
      "cwe": "CWE-494",
      "function_names": [],
      "filenames": [
        "scripts/install_ubuntu_packages.sh"
      ]
    },
    "vulns": {
      "CVE-2024-27284": "cassandra-rs is a Cassandra (CQL) driver for Rust. Code that attempts to use an item (e.g., a row) returned by an iterator after the iterator has advanced to the next item will be accessing freed memory and experience undefined behaviour.  The problem has been fixed in version 3.0.0.\n"
    }
  },
  "61": {
    "attempt": "b4dc8ca51cad03972a4a",
    "lead": {
      "headline": "Race Condition in S3 File Handling",
      "analysis": "The S3 upload functionality in uploadSourceToS3 of S3DataManager.java checks for the existence and versions of files in an S3 bucket and subsequently makes decisions based on this information. However, if the state of the S3 bucket changes between the check and the use, this can lead to erroneous behavior. The disjointed check-then-act logic could lead to race conditions especially in high concurrency environments or when multiple Jenkins instances are interacting with the same S3 bucket.\n",
      "classification": "very promising",
      "cwe": "CWE-362",
      "function_names": [
        "uploadSourceToS3"
      ],
      "filenames": [
        "/src/main/java/S3DataManager.java"
      ]
    },
    "vulns": {
      "CVE-2018-1000404": "Jenkins project Jenkins AWS CodeBuild Plugin version 0.26 and earlier contains a Insufficiently Protected Credentials vulnerability in AWSClientFactory.java, CodeBuilder.java that can result in Credentials Disclosure. This attack appear to be exploitable via local file access. This vulnerability appears to have been fixed in 0.27 and later."
    }
  },
  "62": {
    "attempt": "23bba487494a50cedf5e",
    "lead": {
      "headline": "Hard-coded Credentials",
      "analysis": "The code contains hard-coded credentials in the ECXSdk class constructor and various methods which use these credentials for HTTP Basic Authentication. This is a significant security vulnerability as it exposes sensitive information directly in the source code.\n",
      "classification": "very promising",
      "cwe": "CWE-798",
      "function_names": [
        "ECXSdk",
        "doPostForSessionId"
      ],
      "filenames": [
        "src/main/java/com/catalogic/ecx/sdk/ECXSdk.java"
      ]
    },
    "vulns": {
      "CVE-2020-2128": "Jenkins ECX Copy Data Management Plugin 1.9 and earlier stores a password unencrypted in job config.xml files on the Jenkins master where it can be viewed by users with Extended Read permission, or access to the master file system."
    }
  },
  "63": {
    "attempt": "1575001199b01d4c201b",
    "lead": {
      "headline": "Improper Neutralization of Special Elements used in an OS Command ('OS Command Injection') (CWE-78)",
      "analysis": "The sha256_file function in src/cli/sha256_file.c opens a file specified by the user without properly sanitizing the input, allowing an attacker to execute arbitrary commands on the system.\n\nIf the fname parameter contains shell metacharacters or path traversal sequences, it could cause the open call to interpret the input as a command instead of a filename.\n",
      "classification": "very promising",
      "cwe": "CWE-78",
      "function_names": [
        "sha256_file"
      ],
      "filenames": [
        "src/cli/sha256_file.c"
      ]
    },
    "vulns": {
      "CVE-2022-24884": "ecdsautils is a tiny collection of programs used for ECDSA (keygen, sign, verify). `ecdsa_verify_[prepare_]legacy()` does not check whether the signature values `r` and `s` are non-zero. A signature consisting only of zeroes is always considered valid, making it trivial to forge signatures. Requiring multiple signatures from different public keys does not mitigate the issue: `ecdsa_verify_list_legacy()` will accept an arbitrary number of such forged signatures. Both the `ecdsautil verify` CLI command and the libecdsautil library are affected. The issue has been fixed in ecdsautils 0.4.1. All older versions of ecdsautils (including versions before the split into a library and a CLI utility) are vulnerable."
    }
  },
  "64": {
    "attempt": "e75ab89302bca41a3238",
    "lead": {
      "headline": "Insufficient Encryption for API Key",
      "analysis": "The API key used for authentication is stored in plain text and transmitted without sufficient encryption, making it susceptible to interception and unauthorized access.\n",
      "classification": "very promising",
      "cwe": "CWE-311",
      "function_names": [],
      "filenames": [
        "bot/cogs/api_v1.py"
      ]
    },
    "vulns": {
      "CVE-2024-31442": "Redon Hub is a Roblox Product Delivery Bot, also known as a Hub. In all hubs before version 1.0.2, all commands are capable of being ran by all users, including admin commands. This allows users to receive products for free and delete/create/update products/tags/etc. The only non-affected command is `/products admin clear` as this was already programmed for bot owners only. All users should upgrade to version 1.0.2 to receive a patch."
    }
  },
  "65": {
    "attempt": "c8ecd565934e160483d6",
    "lead": {
      "headline": "Excessive Logging of User-controlled Data",
      "analysis": "The code segment within src/utils.ts defines functions that directly handle JSON web tokens (JWT) and cookies. These functions are verbose in their operation and could log sensitive information such as JWTs if an error occurs. This excessive logging of potentially sensitive data or errors that include sensitive tracebacks could lead to sensitive data being exposed in logs which are more accessible by malicious actors or unintentionally disclosed through improper log handling.\n",
      "classification": "very promising",
      "cwe": "CWE-532",
      "function_names": [
        "decodeToken",
        "getTokenExpiry",
        "isExpiredToken"
      ],
      "filenames": [
        "src/utils.ts"
      ]
    },
    "vulns": {
      "CVE-2024-29036": "Saleor Storefront is software for building e-commerce experiences. Prior to commit 579241e75a5eb332ccf26e0bcdd54befa33f4783, when any user authenticates in the storefront, anonymous users are able to access their data. The session is leaked through cache and can be accessed by anyone. Users should upgrade to a version that incorporates commit 579241e75a5eb332ccf26e0bcdd54befa33f4783 or later to receive a patch. A possible workaround is to temporarily disable authentication by changing the usage of `createSaleorAuthClient()`."
    }
  },
  "66": {
    "attempt": "f2bf8ee378da8aecc79e",
    "lead": {
      "headline": "Use of hard-coded credentials",
      "analysis": "The script run_tests.sh contains the hard-coded username root for an SSH connection. Hard-coded credentials are a security risk as they cannot be easily changed and may be accidentally exposed, potentially allowing unauthorized access.\n",
      "classification": "very promising",
      "cwe": "CWE-798",
      "function_names": [],
      "filenames": [
        "run_tests.sh"
      ]
    },
    "vulns": {
      "CVE-2019-15787": "libZetta.rs through 0.1.2 has an integer overflow in the zpool parser (for error stats) that leads to a panic."
    }
  },
  "67": {
    "attempt": "c8ecd565934e160483d6",
    "lead": {
      "headline": "Insufficient Validation of Redirect URLs",
      "analysis": "The initiate function in src/SaleorExternalAuth.ts does not adequately validate the redirect URL provided by the user. This can lead to open redirection vulnerabilities where an attacker could redirect a user to a malicious site after initiating an authentication request, exploiting the lack of strict validation on the URL parameter and leveraging the trusted site\u2019s authority to deceive the user or steal information.\n",
      "classification": "very promising",
      "cwe": "CWE-601",
      "function_names": [
        "initiate"
      ],
      "filenames": [
        "src/SaleorExternalAuth.ts"
      ]
    },
    "vulns": {
      "CVE-2024-29036": "Saleor Storefront is software for building e-commerce experiences. Prior to commit 579241e75a5eb332ccf26e0bcdd54befa33f4783, when any user authenticates in the storefront, anonymous users are able to access their data. The session is leaked through cache and can be accessed by anyone. Users should upgrade to a version that incorporates commit 579241e75a5eb332ccf26e0bcdd54befa33f4783 or later to receive a patch. A possible workaround is to temporarily disable authentication by changing the usage of `createSaleorAuthClient()`."
    }
  },
  "68": {
    "attempt": "09be5a7dd754dd4780c5",
    "lead": {
      "headline": "Race Condition in WebSocket Handling due to Inadequate Synchronization",
      "analysis": "In the WebSocket proxy setup, proxyWebSockets function allows data relay between source and target sockets without waiting for the target WebSocket's readiness state except when its state is 'CONNECTICG'. This can lead to race conditions where messages are transmitted to the target WebSocket before it is fully prepared to handle them, potentially resulting in lost or improperly handled messages. This race condition not only raises concerns regarding the integrity and reliability of the data communication process but also exposes the services to potential denial-of-service attacks by deliberately triggering race conditions to exhaust system resources.\n",
      "classification": "very promising",
      "cwe": "CWE-362",
      "function_names": [
        "proxyWebSockets",
        "waitConnection"
      ],
      "filenames": [
        "./index.js"
      ]
    },
    "vulns": {
      "CVE-2021-21322": "fastify-http-proxy is an npm package which is a fastify plugin for proxying your http requests to another server, with hooks. By crafting a specific URL, it is possible to escape the prefix of the proxied backend service. If the base url of the proxied server is `/pub/`, a user expect that accessing `/priv` on the target service would not be possible. In affected versions, it is possible. This is fixed in version 4.3.1."
    }
  },
  "69": {
    "attempt": "0348f723848ae9b3197f",
    "lead": {
      "headline": "Unrestricted file upload in SocketIOFile",
      "analysis": "The SocketIOFile class in lollms/data.py allows receiving and saving files from a Socket.IO server. However, it does not seem to restrict file types or validate the content of the uploaded files. This could potentially allow attackers to upload malicious files, leading to code execution or other security issues.\n",
      "classification": "very promising",
      "cwe": "CWE-434",
      "function_names": [
        "receive_file"
      ],
      "filenames": [
        "lollms/data.py"
      ]
    },
    "vulns": {
      "CVE-2024-4078": "A vulnerability in the parisneo/lollms, specifically in the `/unInstall_binding` endpoint, allows for arbitrary code execution due to insufficient sanitization of user input. The issue arises from the lack of path sanitization when handling the `name` parameter in the `unInstall_binding` function, allowing an attacker to traverse directories and execute arbitrary code by loading a malicious `__init__.py` file. This vulnerability affects the latest version of the software. The exploitation of this vulnerability could lead to remote code execution on the system where parisneo/lollms is deployed."
    }
  },
  "70": {
    "attempt": "b655637bcc825875425d",
    "lead": {
      "headline": "Improper Neutralization of Special Elements used in an OS Command ('OS Command Injection')",
      "analysis": "The AddLabel class performs string replacements using environment variables without proper sanitization, which could lead to OS Command Injection vulnerabilities if untrusted input is used in the environment variables. This vulnerability could allow an attacker to execute arbitrary commands on the system.\n",
      "classification": "very promising",
      "cwe": "CWE-78",
      "function_names": [
        "perform"
      ],
      "filenames": [
        "src/main/java/org/jenkinsci/plugins/jiraext/view/AddLabel.java"
      ]
    },
    "vulns": {
      "CVE-2019-10302": "Jenkins jira-ext Plugin 0.8 and earlier stored credentials unencrypted in its global configuration file on the Jenkins master where they could be viewed by users with access to the master file system."
    }
  },
  "71": {
    "attempt": "cf3d254b3f17cc8ea86a",
    "lead": {
      "headline": "Insecure child process execution",
      "analysis": "The gitlog function uses the exec and execSync functions from the child_process module to execute the git log command. The exec and execSync functions execute the command in a new shell, which can allow for command injection vulnerabilities. An attacker could potentially inject malicious commands into the git log command and execute them on the server.\n",
      "classification": "very promising",
      "cwe": "CWE-78",
      "function_names": [
        "exec",
        "execSync"
      ],
      "filenames": [
        "src/index.ts"
      ]
    },
    "vulns": {
      "CVE-2021-26541": "The gitlog function in src/index.ts in gitlog before 4.0.4 has a command injection vulnerability."
    }
  },
  "72": {
    "attempt": "216a0c002f6e51913a0c",
    "lead": {
      "headline": "The application does not properly validate user input, leading to SQL injection vulnerabilities.",
      "analysis": "The application constructs SQL queries using user-supplied input without properly sanitizing it. Attackers could craft malicious input to manipulate the SQL queries, potentially gaining unauthorized access to the database, leaking sensitive information, or executing arbitrary SQL commands.\n",
      "classification": "very promising",
      "cwe": "CWE-89",
      "function_names": [
        "search_database",
        "update_record"
      ],
      "filenames": [
        "/app/models/database_interface.py"
      ]
    },
    "vulns": {
      "CVE-2024-22400": "Nextcloud User Saml is an app for authenticating Nextcloud users using SAML. In affected versions users can be given a link to the Nextcloud server and end up on a uncontrolled thirdparty server. It is recommended that the User Saml app is upgraded to version 5.1.5, 5.2.5, or 6.0.1. There are no known workarounds for this issue."
    }
  },
  "73": {
    "attempt": "e771981e8fd37d38d237",
    "lead": {
      "headline": "Code Execution via Arbitrary Path Injection",
      "analysis": "In the wrap function and the wrap invocation, the program dynamically determines code paths via urlToOptions function and user-supplied URLs. If an attacker could inject URLs containing special characters or paths, it's possible to manipulate the options object and redirect to arbitrary locations, potentially leading to code execution vulnerabilities. Further exploitation could involve redirecting to malicious scripts or sites.\n",
      "classification": "very promising",
      "cwe": "CWE-94",
      "function_names": [
        "wrap",
        "urlToOptions"
      ],
      "filenames": [
        "index.js"
      ]
    },
    "vulns": {
      "CVE-2022-0536": "Improper Removal of Sensitive Information Before Storage or Transfer in NPM follow-redirects prior to 1.14.8.\n\n",
      "CVE-2022-0155": "follow-redirects is vulnerable to Exposure of Private Personal Information to an Unauthorized Actor",
      "CVE-2024-28849": "follow-redirects is an open source, drop-in replacement for Node's `http` and `https` modules that automatically follows redirects. In affected versions follow-redirects only clears authorization header during cross-domain redirect, but keep the proxy-authentication header which contains credentials too. This vulnerability may lead to credentials leak, but has been addressed in version 1.15.6. Users are advised to upgrade. There are no known workarounds for this vulnerability."
    }
  },
  "74": {
    "attempt": "49f14e9ab8102bd95e75",
    "lead": {
      "headline": "Use of Hard-Coded Credentials",
      "analysis": "The class CallbackTestHandler contains public static variables tokenKey and password which are used to store credentials. Hard-coded credentials can lead to security vulnerabilities as they can be extracted and misused.\n",
      "classification": "very promising",
      "cwe": "CWE-798",
      "function_names": [
        "handle"
      ],
      "filenames": [
        "dssp-client/src/test/java/test/unit/be/e_contract/dssp/client/CallbackTestHandler.java"
      ]
    },
    "vulns": {
      "CVE-2016-15011": "A vulnerability classified as problematic was found in e-Contract dssp up to 1.3.1. Affected by this vulnerability is the function checkSignResponse of the file dssp-client/src/main/java/be/e_contract/dssp/client/SignResponseVerifier.java. The manipulation leads to xml external entity reference. Upgrading to version 1.3.2 is able to address this issue. The identifier of the patch is ec4238349691ec66dd30b416ec6eaab02d722302. It is recommended to upgrade the affected component. The identifier VDB-217549 was assigned to this vulnerability."
    }
  },
  "75": {
    "attempt": "118ef03b09cbcf3ada56",
    "lead": {
      "headline": "Improper Limitation of a Pathname to a Restricted Directory ('Path Traversal')",
      "analysis": "The open() method in lib/XMLHttpRequest.js loads files from the local filesystem \nwhen the url protocol is 'file://'. However, it does not appear to properly \nsanitize the url pathname to prevent an attacker from specifying files outside\nof the intended directory using path traversal characters like \"..\" and \"/\". \nThis could allow an attacker to read arbitrary files on the server's filesystem.\n",
      "classification": "very promising",
      "cwe": "CWE-22",
      "function_names": [
        "open"
      ],
      "filenames": [
        "lib/XMLHttpRequest.js"
      ]
    },
    "vulns": {
      "CVE-2020-28502": "This affects the package xmlhttprequest before 1.7.0; all versions of package xmlhttprequest-ssl. Provided requests are sent synchronously (async=False on xhr.open), malicious user input flowing into xhr.send could result in arbitrary code being injected and run."
    }
  },
  "76": {
    "attempt": "77337ffed02ca04ee4e2",
    "lead": {
      "headline": "Potential DOM-based Cross-Site Scripting (XSS) vulnerability",
      "analysis": "The code uses innerHTML to update the DOM with user-provided data, which could potentially lead to a DOM-based Cross-Site Scripting (XSS) vulnerability if the input data is not properly sanitized.\n",
      "classification": "very promising",
      "cwe": "CWE-79",
      "function_names": [
        "requireconfirmation",
        "loginPage"
      ],
      "filenames": [
        "assets/js/setup.js",
        "assets/js/login.js"
      ]
    },
    "vulns": {
      "CVE-2023-51700": "Unofficial Mobile BankID Integration for WordPress lets users employ Mobile BankID to authenticate themselves on your WordPress site. Prior to 1.0.1, WP-Mobile-BankID-Integration is affected by a vulnerability classified as a Deserialization of Untrusted Data vulnerability, specifically impacting scenarios where an attacker can manipulate the database. If unauthorized actors gain access to the database, they could exploit this vulnerability to execute object injection attacks. This could lead to unauthorized code execution, data manipulation, or data exfiltration within the WordPress environment.  Users of the plugin should upgrade to version 1.0.1 (or later), where the serialization and deserialization of OrderResponse objects have been switched out to an array stored as JSON.  A possible workaround for users unable to upgrade immediately is to enforce stricter access controls on the database, ensuring that only trusted and authorized entities can modify data. Additionally, implementing monitoring tools to detect unusual database activities could help identify and mitigate potential exploitation attempts.\n"
    }
  },
  "77": {
    "attempt": "6e19a3805888434617aa",
    "lead": {
      "headline": "Improper Neutralization of Input During Web Page Generation (CWE-79)",
      "analysis": "The queryObject function in the jquery.query-object.js code does not properly sanitize the input values before incorporating them into the query object. This can lead to potential cross-site scripting (XSS) vulnerabilities.\n\nWhen the GET and SET methods are used to retrieve and set values in the query object, the input values are not properly encoded or sanitized. An attacker could inject malicious HTML or JavaScript code into the query string, which would then be executed when the page is rendered.\n\nThis vulnerability could allow an attacker to steal sensitive information, perform unauthorized actions, or even take control of the user's session.\n",
      "classification": "very promising",
      "cwe": "CWE-79",
      "function_names": [
        "GET",
        "SET"
      ],
      "filenames": [
        "jquery.query-object.js"
      ]
    },
    "vulns": {
      "CVE-2021-20083": "Improperly Controlled Modification of Object Prototype Attributes ('Prototype Pollution') in jquery-plugin-query-object 2.2.3 allows a malicious user to inject properties into Object.prototype."
    }
  },
  "78": {
    "attempt": "c7e2c924ac47c9f23a3b",
    "lead": {
      "headline": "Hardcoded Environment Variable Values in Tests",
      "analysis": "The test code contains hardcoded environment variables used in various tests, particularly related to handling connection details for ElasticSearch, RabbitMQ, Syslog, and Redis. They are directly used in the test code among other values like passwords and URLs.\n\nExploit is made easy by modifying these environment variables to injectable values leading to various attack vectors like redirecting connections to malicious servers, malicious inputs for deserialization, and more.\n",
      "classification": "very promising",
      "cwe": "CWE-798",
      "function_names": [],
      "filenames": [
        "src/test/java/jenkins/plugins/logstash/ElasticSearchDaoTest.java",
        "src/test/java/jenkins/plugins/logstash/RedisDaoTest.java",
        "src/test/java/jenkins/plugins/logstash/SyslogDaoTest.java"
      ]
    },
    "vulns": {
      "CVE-2020-2143": "Jenkins Logstash Plugin 2.3.1 and earlier transmits configured credentials in plain text as part of its global Jenkins configuration form, potentially resulting in their exposure."
    }
  },
  "79": {
    "attempt": "83670cd5d6dad2a19858",
    "lead": {
      "headline": "Potential command injection vulnerability",
      "analysis": "The codebase uses system calls to execute external commands such as ifconfig and ssh with user-provided inputs. If these inputs are not sanitized properly, it could lead to command injection attacks where an attacker could execute arbitrary commands on the system.",
      "classification": "very promising",
      "cwe": "CWE-78",
      "function_names": [
        "nm_ssh_get_free_device",
        "nm_ssh_start_ssh_binary"
      ],
      "filenames": [
        "src/nm-ssh-service.c"
      ]
    },
    "vulns": {
      "CVE-2020-9355": "danfruehauf NetworkManager-ssh before 1.2.11 allows privilege escalation because extra options are mishandled."
    }
  },
  "80": {
    "attempt": "e89410963a9e7050b17d",
    "lead": {
      "headline": "Potential Race Condition in escape_string()",
      "analysis": "The escape_string function relies on a static std::string map[256] which is initialized with a mutex to prevent race conditions. However, this initialization may still be accessed by multiple threads simultaneously, raising the possibility of a race condition.\n",
      "classification": "very promising",
      "cwe": "CWE-362",
      "function_names": [
        "escape_string"
      ],
      "filenames": [
        "jsonxx.cc"
      ]
    },
    "vulns": {
      "CVE-2022-23460": "Jsonxx or Json++ is a JSON parser, writer and reader written in C++. In affected versions of jsonxx json parsing may lead to stack exhaustion in an address sanitized (ASAN) build. This issue may lead to Denial of Service if the program using the jsonxx library crashes. This issue exists on the current commit of the jsonxx project and the project itself has been archived. Updates are not expected. Users are advised to find a replacement.",
      "CVE-2022-23459": "Jsonxx or Json++ is a JSON parser, writer and reader written in C++. In affected versions of jsonxx use of the Value class may lead to memory corruption via a double free or via a use after free. The value class has a default assignment operator which may be used with pointer types which may point to alterable data where the pointer itself is not updated. This issue exists on the current commit of the jsonxx project. The project itself has been archived and updates are not expected. Users are advised to find a replacement."
    }
  },
  "81": {
    "attempt": "7f051ecdc4259f01eb47",
    "lead": {
      "headline": "Potential injective vulnerability in Yandex fetch() method",
      "analysis": "The fetch() method in src/engines/yandex.js constructs an HTTP request by directly embedding user-provided input into a URL string without proper validation or sanitization. This could potentially lead to command injection vulnerabilities if attackers can manipulate input values.\n",
      "classification": "very promising",
      "cwe": "CWE-78",
      "function_names": [
        "fetch"
      ],
      "filenames": [
        "src/engines/yandex.js"
      ]
    },
    "vulns": {
      "CVE-2024-29042": "Translate is a package that allows users to convert text to different languages on Node.js and the browser. Prior to version 3.0.0, an attacker controlling the second variable of the `translate` function is able to perform a cache poisoning attack. They can change the outcome of translation requests made by subsequent users. The `opt.id` parameter allows the overwriting of the cache key. If an attacker sets the `id` variable to the cache key that would be generated by another user, they can choose the response that user gets served. Version 3.0.0 fixes this issue."
    }
  },
  "82": {
    "attempt": "49874b0fb00018388e6d",
    "lead": {
      "headline": "Improper Neutralization of Special Elements in Command Line Arguments in build.sh",
      "analysis": "The build.sh script exhibits vulnerability due to the improper handling of special characters in the command line arguments, which could allow an attacker to inject additional shell commands. Since arguments such as $1 and $2 are not sanitized before being embedded into other commands (e.g., gsed -i 's/Version: .*/Version: '$2'/g' build/mobile-bankid-integration.php), an attacker can exploit this by inserting special shell characters or commands into these fields. This could lead to unintended command execution on the server where the script is run.\n",
      "classification": "very promising",
      "cwe": "CWE-78",
      "function_names": [],
      "filenames": [
        "build.sh"
      ]
    },
    "vulns": {
      "CVE-2023-51700": "Unofficial Mobile BankID Integration for WordPress lets users employ Mobile BankID to authenticate themselves on your WordPress site. Prior to 1.0.1, WP-Mobile-BankID-Integration is affected by a vulnerability classified as a Deserialization of Untrusted Data vulnerability, specifically impacting scenarios where an attacker can manipulate the database. If unauthorized actors gain access to the database, they could exploit this vulnerability to execute object injection attacks. This could lead to unauthorized code execution, data manipulation, or data exfiltration within the WordPress environment.  Users of the plugin should upgrade to version 1.0.1 (or later), where the serialization and deserialization of OrderResponse objects have been switched out to an array stored as JSON.  A possible workaround for users unable to upgrade immediately is to enforce stricter access controls on the database, ensuring that only trusted and authorized entities can modify data. Additionally, implementing monitoring tools to detect unusual database activities could help identify and mitigate potential exploitation attempts.\n"
    }
  },
  "83": {
    "attempt": "51edd83d86aac7b1c64d",
    "lead": {
      "headline": "Lack of Input Validation Leading to Unchecked Command Execution",
      "analysis": "In some functions, input strings are directly passed to command execution routines without proper validation or sanitization, potentially allowing for command injection attacks.\n",
      "classification": "very promising",
      "cwe": "CWE-78",
      "function_names": [
        "not specified"
      ],
      "filenames": [
        "not specified"
      ]
    },
    "vulns": {
      "CVE-2019-10463": "A missing permission check in Jenkins Dynatrace Application Monitoring Plugin allows attackers with Overall/Read permission to connect to an attacker-specified URL using attacker-specified credentials.",
      "CVE-2019-10461": "Jenkins Dynatrace Application Monitoring Plugin 2.1.3 and earlier stored credentials unencrypted in its global configuration file on the Jenkins master where they could be viewed by users with access to the master file system.",
      "CVE-2019-10462": "A cross-site request forgery vulnerability in Jenkins Dynatrace Application Monitoring Plugin 2.1.3 and earlier allowed attackers to connect to an attacker-specified URL using attacker-specified credentials."
    }
  },
  "84": {
    "attempt": "8dd7e5cebc6d17e6a967",
    "lead": {
      "headline": "Use of Cleartext Protocols in restart-net-servers.sh",
      "analysis": "The script restart-net-servers.sh restarts network services such as tftpd-hpa and rpcbind. These services are known to use cleartext communication protocols by default, which can expose sensitive information to an unauthorized actor through network sniffing.\n",
      "classification": "very promising",
      "cwe": "CWE-319",
      "function_names": [],
      "filenames": [
        "configs/linux-lab/tools/restart-net-servers.sh"
      ]
    },
    "vulns": {
      "CVE-2022-42150": "TinyLab linux-lab v1.1-rc1 and cloud-labv0.8-rc2, v1.1-rc1 are vulnerable to insecure permissions. The default configuration could cause Container Escape."
    }
  },
  "85": {
    "attempt": "e3c2b5bc2573ae0e4968",
    "lead": {
      "headline": "Memory leak due to missed memory freeing in JS interpreter",
      "analysis": "In the jsP_freeparse function, there's a loop to free allocated AST nodes but no consideration for potential recursive nodes or cyclic references within the AST. This could potentially lead to memory leaks as certain nodes may not be freed properly.\n",
      "classification": "very promising",
      "cwe": "CWE-401",
      "function_names": [
        "jsP_freeparse"
      ],
      "filenames": [
        "jsparse.c"
      ]
    },
    "vulns": {
      "CVE-2021-33797": "Buffer-overflow in jsdtoa.c in Artifex MuJS in versions 1.0.1 to 1.1.1. An integer overflow happens when js_strtod() reads in floating point exponent, which leads to a buffer overflow in the pointer *d.",
      "CVE-2021-33796": "In MuJS before version 1.1.2, a use-after-free flaw in the regexp source property access may cause denial of service.\n\n",
      "CVE-2020-24343": "Artifex MuJS through 1.0.7 has a use-after-free in jsrun.c because of unconditional marking in jsgc.c.",
      "CVE-2019-11411": "An issue was discovered in Artifex MuJS 1.0.5. The Number#toFixed() and numtostr implementations in jsnumber.c have a stack-based buffer overflow.",
      "CVE-2019-11413": "An issue was discovered in Artifex MuJS 1.0.5. It has unlimited recursion because the match function in regexp.c lacks a depth check.",
      "CVE-2019-11412": "An issue was discovered in Artifex MuJS 1.0.5. jscompile.c can cause a denial of service (invalid stack-frame jump) because it lacks an ENDTRY opcode call.",
      "CVE-2019-12798": "An issue was discovered in Artifex MuJS 1.0.5. regcompx in regexp.c does not restrict regular expression program size, leading to an overflow of the parsed syntax list size.",
      "CVE-2021-45005": "Artifex MuJS v1.1.3 was discovered to contain a heap buffer overflow which is caused by conflicting JumpList of nested try/finally statements.",
      "CVE-2022-30975": "In Artifex MuJS through 1.2.0, jsP_dumpsyntax in jsdump.c has a NULL pointer dereference, as demonstrated by mujs-pp.",
      "CVE-2022-30974": "compile in regexp.c in Artifex MuJS through 1.2.0 results in stack consumption because of unlimited recursion, a different issue than CVE-2019-11413.",
      "CVE-2022-44789": "A logical issue in O_getOwnPropertyDescriptor() in Artifex MuJS 1.0.0 through 1.3.x before 1.3.2 allows an attacker to achieve Remote Code Execution through memory corruption, via the loading of a crafted JavaScript file.",
      "CVE-2020-22886": "Buffer overflow vulnerability in function jsG_markobject in jsgc.c in mujs before 1.0.8, allows remote attackers to cause a denial of service.",
      "CVE-2020-22885": "Buffer overflow vulnerability in mujs before 1.0.8 due to recursion in the GC scanning phase, allows remote attackers to cause a denial of service.",
      "CVE-2018-5759": "jsparse.c in Artifex MuJS through 1.0.2 does not properly maintain the AST depth for binary expressions, which allows remote attackers to cause a denial of service (excessive recursion) via a crafted file.",
      "CVE-2018-6191": "The js_strtod function in jsdtoa.c in Artifex MuJS through 1.0.2 has an integer overflow because of incorrect exponent validation."
    }
  },
  "86": {
    "attempt": "7dabaaa71461343db701",
    "lead": {
      "headline": "Privilege Escalation due to unchecked return from command execution",
      "analysis": "The ComputeEngineLinuxLauncher class does not check the return value of a privileged command execution during the SSH launch operation. This allows the execution of arbitrary commands as privileged operations which can lead to privilege escalation.\n",
      "classification": "very promising",
      "cwe": "CWE-252",
      "function_names": [
        "launch"
      ],
      "filenames": [
        "src/main/java/com/google/jenkins/plugins/computeulocking/ComputeEngineLinuxLauncher.java"
      ]
    },
    "vulns": {
      "CVE-2023-49652": "Incorrect permission checks in Jenkins Google Compute Engine Plugin 4.550.vb_327fca_3db_11 and earlier allow attackers with global Item/Configure permission (while lacking Item/Configure permission on any particular job) to enumerate system-scoped credentials IDs of credentials stored in Jenkins and to connect to Google Cloud Platform using attacker-specified credentials IDs obtained through another method, to obtain information about existing projects. This fix has been backported to 4.3.17.1.",
      "CVE-2019-16548": "A cross-site request forgery vulnerability in Jenkins Google Compute Engine Plugin 4.1.1 and earlier in ComputeEngineCloud#doProvision could be used to provision new agents.",
      "CVE-2019-16547": "Missing permission checks in various API endpoints in Jenkins Google Compute Engine Plugin 4.1.1 and earlier allow attackers with Overall/Read permission to obtain limited information about the plugin configuration and environment.",
      "CVE-2019-16546": "Jenkins Google Compute Engine Plugin 4.1.1 and earlier does not verify SSH host keys when connecting agents created by the plugin, enabling man-in-the-middle attacks.",
      "CVE-2022-29052": "Jenkins Google Compute Engine Plugin 4.3.8 and earlier stores private keys unencrypted in cloud agent config.xml files on the Jenkins controller where they can be viewed by users with Extended Read permission, or access to the Jenkins controller file system."
    }
  },
  "87": {
    "attempt": "8077a12e6ac1df5f7b7a",
    "lead": {
      "headline": "HTTP Response Splitting via Access Control Exposure",
      "analysis": "The server's response can potentially be manipulated by modifying the headers or the response body, since the code lacks proper sanitization or validation of header inputs before they are sent within HTTP responses. This can allow attackers to perform HTTP response splitting or header injection attacks.\n",
      "classification": "very promising",
      "cwe": "CWE-644",
      "function_names": [
        "setRequestHeader",
        "getResponseHeader"
      ],
      "filenames": [
        "lib/XMLHttpRequest.js"
      ]
    },
    "vulns": {
      "CVE-2020-28502": "This affects the package xmlhttprequest before 1.7.0; all versions of package xmlhttprequest-ssl. Provided requests are sent synchronously (async=False on xhr.open), malicious user input flowing into xhr.send could result in arbitrary code being injected and run."
    }
  },
  "88": {
    "attempt": "b8fc18b44c7c125298ba",
    "lead": {
      "headline": "Argument injection in contact group deletion",
      "analysis": "The endpoint ucp/ajax.php?module=contactmanager&command=deletegroup appears to be vulnerable to argument injection. The id parameter, which specifies the group to delete, is directly appended to a shell command without proper sanitization. An attacker could potentially exploit this vulnerability by supplying a malicious id value containing shell metacharacters, leading to the execution of arbitrary commands on the server.\n",
      "classification": "very promising",
      "cwe": "CWE-77",
      "function_names": [
        "ContactmanagerC.displayWidget"
      ],
      "filenames": [
        "ucp/assets/js/global.js"
      ]
    },
    "vulns": {
      "CVE-2019-16966": "An issue was discovered in Contactmanager 13.x before 13.0.45.3, 14.x before 14.0.5.12, and 15.x before 15.0.8.21 for FreePBX 14.0.10.3. In the Contactmanager class (html\\admin\\modules\\contactmanager\\Contactmanager.class.php), an unsanitized group variable coming from the URL is reflected in HTML on 2 occasions, leading to XSS. It can be requested via a GET request to /admin/ajax.php?module=contactmanager."
    }
  },
  "89": {
    "attempt": "9731399998c8574b70e6",
    "lead": {
      "headline": "Argument Injection in start.sh",
      "analysis": "The prepareSourceCode function in dev-deployment/start.sh uses user-supplied data from the $1 and $2 arguments in the construction of shell commands without proper sanitization.\nAn attacker could potentially control these arguments to inject arbitrary commands that would be executed during the build process.\n",
      "classification": "very promising",
      "cwe": "CWE-77",
      "function_names": [
        "prepareSourceCode"
      ],
      "filenames": [
        "dev-deployment/start.sh"
      ]
    },
    "vulns": {
      "CVE-2023-25822": "ReportPortal is an AI-powered test automation platform. Prior to version 5.10.0 of the `com.epam.reportportal:service-api` module, corresponding to ReportPortal version 23.2, the ReportPortal database becomes unstable and reporting almost fully stops except for small launches with approximately 1 test inside when the test_item.path field is exceeded the allowable `ltree` field type indexing limit (path length>=120, approximately recursive nesting of the nested steps). REINDEX INDEX path_gist_idx and path_idx aren't helped. The problem was fixed in `com.epam.reportportal:service-api` module version 5.10.0 (product release 23.2), where the maximum number of nested elements were programmatically limited. A workaround is available. After deletion of the data with long paths, and reindexing both indexes (path_gist_idx and path_idx), the database becomes stable and ReportPortal works properly."
    }
  },
  "90": {
    "attempt": "d2e7f77df067c4d7ceb0",
    "lead": {
      "headline": "Potential unsafe reflection vulnerability",
      "analysis": "The codebase includes the use of the Use of Externally-Controlled Input to Select Classes or Code ('Unsafe Reflection') vulnerability (CWE-470). This can occur in the BearyChatSendStep class, where the Jenkins.getInstance() method is used to retrieve the global configuration. An attacker could potentially provide crafted input to the BearyChatSendStep that could lead to the execution of arbitrary code through reflection.\n",
      "classification": "very promising",
      "cwe": "CWE-470",
      "function_names": [
        "BearyChatSendStep.BearyChatSendStepExecution.run"
      ],
      "filenames": [
        "src/main/java/jenkins/plugins/bearychat/workflow/BearyChatSendStep.java"
      ]
    },
    "vulns": {
      "CVE-2023-24459": "A missing permission check in Jenkins BearyChat Plugin 3.0.2 and earlier allows attackers with Overall/Read permission to connect to an attacker-specified URL.",
      "CVE-2023-24458": "A cross-site request forgery (CSRF) vulnerability in Jenkins BearyChat Plugin 3.0.2 and earlier allows attackers to connect to an attacker-specified URL."
    }
  },
  "91": {
    "attempt": "4ab76ece86fa16aa804f",
    "lead": {
      "headline": "Unconstrained file type for ksud in SELinux policy",
      "analysis": "The installation script in 'userspace/ksud/src/installer.sh' contains a function that explicitly allows all permissions for an unconstrained file type 'ksu_file' in the SELinux policy. This is achieved through ksu_type() and ksu_allow() functions in the SELinux policy modification modules, which are executed during the installation process of KernelSU. The unconstrained file type allows unauthorized reading, writing, and execution of any file with this type, potentially leading to privilege escalation and abuse by other untrusted processes on the system.\n",
      "classification": "very promising",
      "cwe": "CWE-264",
      "function_names": [
        "apply_kernelsu_rules"
      ],
      "filenames": [
        "scripts/ksubot.py"
      ]
    },
    "vulns": {
      "CVE-2023-46139": "KernelSU is a Kernel based root solution for Android. Starting in version 0.6.1 and prior to version 0.7.0, if a KernelSU installed device is infected with a malware whose app signing block specially constructed, it can take over root privileges on the device. The vulnerable verification logic actually obtains the signature of the last block with an id of `0x7109871a`, while the verification logic during Android installation is to obtain the first one. In addition to the actual signature upgrade that has been fixed (KSU thought it was V2 but was actually V3), there is also the problem of actual signature downgrading (KSU thought it was V2 but was actually V1). Find a condition in the signature verification logic that will cause the signature not to be found error, and KernelSU does not implement the same conditions, so KSU thinks there is a V2 signature, but the APK signature verification actually uses the V1 signature. This issue is fixed in version 0.7.0. As workarounds, keep the KernelSU manager installed and avoid installing unknown apps.",
      "CVE-2023-5521": "Incorrect Authorization in GitHub repository tiann/kernelsu prior to v0.6.9.",
      "CVE-2023-49794": "KernelSU is a Kernel-based root solution for Android devices. In versions 0.7.1 and prior, the logic of get apk path in KernelSU kernel module can be bypassed, which causes any malicious apk named `me.weishu.kernelsu` get root permission. If a KernelSU module installed device try to install any not checked apk which package name equal to the official KernelSU Manager, it can take over root privileges on the device. As of time of publication, a patched version is not available."
    }
  },
  "92": {
    "attempt": "1c532ec01b1c6a7c6f20",
    "lead": {
      "headline": "Reflection in DefaultJobProvider.java Without Proper Validation",
      "analysis": "The method getJobByNameOrDisplayName in DefaultJobProvider.java directly accesses the Jenkins instance and retrieves job names or display names via reflection. If not properly filtered, this could allow unauthorized access or tampering with job names via reflection attacks.\n",
      "classification": "very promising",
      "cwe": "CWE-470",
      "function_names": [
        "getJobByNameOrDisplayName"
      ],
      "filenames": [
        "src/main/java/hudson/plugins/im/bot/DefaultJobProvider.java"
      ]
    },
    "vulns": {
      "CVE-2022-28135": "Jenkins instant-messaging Plugin 1.41 and earlier stores passwords for group chats unencrypted in the global configuration file of plugins based on Jenkins instant-messaging Plugin on the Jenkins controller where they can be viewed by users with access to the Jenkins controller file system."
    }
  },
  "93": {
    "attempt": "17eb9789cd98e07b4cfe",
    "lead": {
      "headline": "Test class revealing sensitive test configuration",
      "analysis": "The RocketClientIT and RocketChatClientImplAcceptanceTest classes contain sensitive information within the test setup, such as the admin username and password used in test configurations (admin, supersecret). This information, if leaked, could potentially be used to compromise the system upon which the tests are conducted.\n",
      "classification": "very promising",
      "cwe": "CWE-532",
      "function_names": [
        "setup"
      ],
      "filenames": [
        "src/test/java/jenkins/plugins/rocketchatnotifier/RocketClientIT.java",
        "src/test/java/jenkins/plugins/rocketchatnotifier/rocket/RocketChatClientImplAcceptanceTest.java"
      ]
    },
    "vulns": {
      "CVE-2022-28139": "A missing permission check in Jenkins RocketChat Notifier Plugin 1.4.10 and earlier allows attackers with Overall/Read permission to connect to an attacker-specified URL using attacker-specified credentials.",
      "CVE-2022-34802": "Jenkins RocketChat Notifier Plugin 1.5.2 and earlier stores the login password and webhook token unencrypted in its global configuration file on the Jenkins controller where they can be viewed by users with access to the Jenkins controller file system."
    }
  },
  "94": {
    "attempt": "a689d54cbc2f75d5f54d",
    "lead": {
      "headline": "Sensitive command execution without sufficient validation",
      "analysis": "The application configures git operations to run commands automatically based on the parameters passed. Notably, core.py contains logic to handle git actions within the GitOperation model and applies changes to a git repo. The system does not clearly verify or sanitize the git commands or paths prior, which could potentially be exploited by inserting malicious parameters to manipulate git operations or execute arbitrary commands. This is particularly risky given the varying actions available (commit, tag, branch) and their direct interaction with the system's shell.\n",
      "classification": "very promising",
      "cwe": "CWE-77",
      "function_names": [
        "git_actions"
      ],
      "filenames": [
        "hyper_bump_it/_hyper_bump_it/config/application.py"
      ]
    },
    "vulns": {
      "CVE-2023-41057": "hyper-bump-it is a command line tool for updating the version in project files.`hyper-bump-it` reads a file glob pattern from the configuration file. That is combined with the project root directory to construct a full glob pattern that is used to find files that should be edited. These matched files should be contained within the project root directory, but that is not checked. This could result in changes being written to files outside of the project. The default behaviour of `hyper-bump-it` is to display the planned changes and prompt the user for confirmation before editing any files. However, the configuration file provides a field that can be used cause files to be edited without displaying the prompt. This issue has been fixed in release version 0.5.1. Users are advised to upgrade. Users that are unable to update from vulnerable versions, executing `hyper-bump-it` with the `--interactive` command line argument will ensure that all planned changes are displayed and prompt the user for confirmation before editing any files, even if the configuration file contains `show_confirm_prompt=true`.\n"
    }
  },
  "95": {
    "attempt": "3bf6dc664b24c8550220",
    "lead": {
      "headline": "Improper Privilege Management",
      "analysis": "The codebase appears to be missing appropriate privilege management mechanisms, potentially allowing unauthorized access or execution of sensitive operations.\n",
      "classification": "very promising",
      "cwe": "CWE-269",
      "function_names": [
        "Translate",
        "parse"
      ],
      "filenames": [
        "src/index.js",
        "src/engines/google.js",
        "src/engines/yandex.js"
      ]
    },
    "vulns": {
      "CVE-2024-29042": "Translate is a package that allows users to convert text to different languages on Node.js and the browser. Prior to version 3.0.0, an attacker controlling the second variable of the `translate` function is able to perform a cache poisoning attack. They can change the outcome of translation requests made by subsequent users. The `opt.id` parameter allows the overwriting of the cache key. If an attacker sets the `id` variable to the cache key that would be generated by another user, they can choose the response that user gets served. Version 3.0.0 fixes this issue."
    }
  },
  "96": {
    "attempt": "70bbf2d8e6e9258d2f85",
    "lead": {
      "headline": "Potential command injection vulnerability in the serialNumber function",
      "analysis": "The serialNumber function uses the exec() function to execute various commands to retrieve the system's serial number. However, the function does not properly sanitize the input to the exec() function, which could lead to a command injection vulnerability.\n\nAn attacker could potentially craft a malicious input that could cause the function to execute arbitrary commands on the system, leading to further exploitation.\n",
      "classification": "very promising",
      "cwe": "CWE-78",
      "function_names": [
        "serialNumber"
      ],
      "filenames": [
        "index.js"
      ]
    },
    "vulns": {
      "CVE-2019-10804": "serial-number through 1.3.0 allows execution of arbritary commands. The \"cmdPrefix\" argument in serialNumber function is used by the \"exec\" function without any validation."
    }
  },
  "97": {
    "attempt": "b2ad9a1d6dfb9f365cac",
    "lead": {
      "headline": "Improper input validation in update_version.sh",
      "analysis": "The update_version.sh script performs string substitutions using the sed command to embed the version number from the VERSION file into various files like VCL snippets, composer.json, and LayoutPlugin.php. However, it does not properly validate or sanitize the contents of the VERSION file before using it in the sed commands.\n\nIf an attacker can control the contents of the VERSION file, they could potentially inject malicious input that gets executed by the shell when the sed commands run. This could allow them to execute arbitrary commands on the system.\n",
      "classification": "very promising",
      "cwe": "CWE-20",
      "function_names": [],
      "filenames": [
        "update_version.sh"
      ]
    },
    "vulns": {
      "CVE-2017-13761": "The Fastly CDN module before 1.2.26 for Magento2, when used with a third-party authentication plugin, might allow remote authenticated users to obtain sensitive information from authenticated sessions via vectors involving caching of redirect responses."
    }
  },
  "98": {
    "attempt": "acba0414e1a5f028f5e4",
    "lead": {
      "headline": "Cross-Site Request Forgery (CSRF) vulnerability",
      "analysis": "The captcha.html file does not contain any CSRF protection mechanisms, such as a token or nonce. This allows an attacker to construct a malicious web page that submits a form to the server with arbitrary values when a victim visits the attacker's site. The attacker could potentially bypass the CAPTCHA challenge or perform other unintended actions on the server.\n",
      "classification": "very promising",
      "cwe": "CWE-352",
      "function_names": [],
      "filenames": [
        "captcha.html"
      ]
    },
    "vulns": {
      "CVE-2017-14077": "HTML Injection in Securimage 3.6.4 and earlier allows remote attackers to inject arbitrary HTML into an e-mail message body via the $_SERVER['HTTP_USER_AGENT'] parameter to example_form.ajax.php or example_form.php."
    }
  },
  "99": {
    "attempt": "ca8f97615fa70e8f53ed",
    "lead": {
      "headline": "Potential Vulnerability in get_git_commits_since_tag Function",
      "analysis": "The get_git_commits_since_tag function in make_changelog.py executes a Git command using subprocess.check_output. The command incorporates the git_tag variable, which may introduce command injection vulnerabilities if git_tag can be influenced by user input or contains unexpected characters.\n",
      "classification": "very promising",
      "cwe": "CWE-78",
      "function_names": [
        "get_git_commits_since_tag"
      ],
      "filenames": [
        "make_changelog.py"
      ]
    },
    "vulns": {
      "CVE-2023-46250": "pypdf is a free and open-source pure-python PDF library. An attacker who uses a vulnerability present in versions 3.7.0 through 3.16.4 can craft a PDF which leads to an infinite loop. This infinite loop blocks the current process and can utilize a single core of the CPU by 100%. It does not affect memory usage. That is, for example, the case when the pypdf-user manipulates an incoming malicious PDF e.g. by merging it with another PDF or by adding annotations. The issue was fixed in version 3.17.0. As a workaround, apply the patch manually by modifying `pypdf/generic/_data_structures.py`.",
      "CVE-2023-36464": "pypdf is an open source, pure-python PDF library. In affected versions an attacker may craft a PDF which leads to an infinite loop if `__parse_content_stream` is executed. That is, for example, the case if the user extracted text from such a PDF. This issue was introduced in pull request #969 and resolved in pull request #1828. Users are advised to upgrade. Users unable to upgrade may modify the line `while peek not in (b\"\\r\", b\"\\n\")` in `pypdf/generic/_data_structures.py` to `while peek not in (b\"\\r\", b\"\\n\", b\"\")`.",
      "CVE-2023-36810": "pypdf is a pure-python PDF library capable of splitting, merging, cropping, and transforming the pages of PDF files. An attacker who uses this vulnerability can craft a PDF which leads to unexpected long runtime. This quadratic runtime blocks the current process and can utilize a single core of the CPU by 100%. It does not affect memory usage. This issue has been addressed in PR 808 and versions from 1.27.9 include this fix. Users are advised to upgrade. There are no known workarounds for this vulnerability.",
      "CVE-2023-36807": "pypdf is a pure-python PDF library capable of splitting, merging, cropping, and transforming the pages of PDF files. In version 2.10.5 an attacker who uses this vulnerability can craft a PDF which leads to an infinite loop. This infinite loop blocks the current process and can utilize a single core of the CPU by 100%. It does not affect memory usage. That is, for example, the case if the user extracted metadata from such a malformed PDF. Versions prior to 2.10.5 throw an error, but do not hang forever. This issue was fixed with https://github.com/py-pdf/pypdf/pull/1331 which has been included in release 2.10.6. Users are advised to upgrade. Users unable to upgrade should modify `PyPDF2/generic/_data_structures.py::read_object` to an an error throwing case. See GHSA-hm9v-vj3r-r55m for details. "
    }
  },
  "100": {
    "attempt": "7c1e217448f9709eebf8",
    "lead": {
      "headline": "Absence of proper input validation for the 'domain' parameter",
      "analysis": "The GoogleOAuth2SecurityRealm class takes a 'domain' parameter in its constructor, which is meant to restrict access to Jenkins to users in the specified Google Apps domain. However, there is no validation to ensure that the 'domain' parameter is properly formatted or that it actually represents a valid Google Apps domain.\n\nAn attacker could potentially supply a malicious value for the 'domain' parameter, which could lead to unintended behavior or potentially allow unauthorized access to the Jenkins instance.\n",
      "classification": "very promising",
      "cwe": "CWE-20",
      "function_names": [
        "GoogleOAuth2SecurityRealm"
      ],
      "filenames": [
        "src/main/java/org/jenkinsci/plugins/googlelogin/GoogleOAuth2SecurityRealm.java"
      ]
    },
    "vulns": {
      "CVE-2023-41936": "Jenkins Google Login Plugin 1.7 and earlier uses a non-constant time comparison function when checking whether the provided and expected token are equal, potentially allowing attackers to use statistical methods to obtain a valid token.",
      "CVE-2018-1000173": "A session fixaction vulnerability exists in Jenkins Google Login Plugin 1.3 and older in GoogleOAuth2SecurityRealm.java that allows unauthorized attackers to impersonate another user if they can control the pre-authentication session.",
      "CVE-2018-1000174": "An open redirect vulnerability exists in Jenkins Google Login Plugin 1.3 and older in GoogleOAuth2SecurityRealm.java that allows attackers to redirect users to an arbitrary URL after successful login."
    }
  }
}
